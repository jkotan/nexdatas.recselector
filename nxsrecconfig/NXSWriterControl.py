#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        NXSWriterControl.py
#
# description : Python source for the NXSWriterControl and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                NXSWriterControl are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

""" Selector Server for NeXus Sardana Recorder """

import PyTango
import json
import fnmatch

#==================================================================
#   NXSWriterControl Class Description:
#
#         Tango Server for Nexus Sardana Recorder Settings
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :   Server is ON
#   DevState.RUNNING : Performing a query
#==================================================================


import PyTango
from .Settings import Settings as STG


## NXSWriterControl server interface
class NXSWriterControl(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        ## Recorder Settings
#        print "INIT"
        self.__rsp = None
        self.__value = ""
        self.__name = ""
        self.__groups = {"counter":["*exp_c*"], 
                         "timer":["*exp_t*"],
                         "mca":["*exp_mca*", "*_sca*"],
                         "dac":["*exp_dac*"],
                         "adc":["*exp_adc*"],
                         "motor":["*exp_mot*"],
                         }
        NXSWriterControl.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
#        print "DELETE DEV"
        print >> self.log_info, "[Device delete_device method] for device", \
            self.get_name()
        if self.__rsp:
            self.__rsp = None
        self.set_state(PyTango.DevState.OFF)

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
#        print "INIT DEV"
        print >> self.log_info, "In ", self.get_name(), "::init_device()"
        self.get_device_properties(self.get_device_class())
        if self.ChannelTypes:
            self.__groups = json.loads(self.ChannelTypes)

        if not self.NXSRecSelector:
            db = PyTango.Database()
            servers = db.get_device_exported_for_class(
                "NXSRecSelector").value_string
            if servers:
                self.NXSRecSelector =  servers[0]
#        print "SERVER", self.NXSRecSelector
        if self.NXSRecSelector:
            self.__rsp = PyTango.DeviceProxy(str(self.NXSRecSelector))

        self.set_state(PyTango.DevState.ON)

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::always_excuted_hook()"

#==================================================================
#
#    NXSWriterControl read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, _):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_attr_hardware()"

#------------------------------------------------------------------
#    Read Components attribute
#------------------------------------------------------------------
    def read_SelectedChannels(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Components()"
        components = set(self.__rsp.Components)
        components.update(self.__rsp.DataSources)
        components.update(json.loads(self.__rsp.timer))
        components.update(self.__rsp.automaticComponents)
        components.update(self.__rsp.mandatoryComponents())
        attr.set_value(list(sorted(components)))

#------------------------------------------------------------------
#    Read Timers attribute
#------------------------------------------------------------------
    def read_Timers(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Timer()"
        tm = self.__rsp.timer
        try:
            timers = json.loads(tm)
        except:
            timers = [tm]
        attr.set_value(timers)

#------------------------------------------------------------------
#    Write Timers attribute
#------------------------------------------------------------------
    def write_Timers(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Timer()"
        tm = attr.get_write_value()
        try:
            timers = json.dump(tm)
        except:
            timers = tm
        self.__rsp.write_attribute("Timer", str(timers))
        print >> self.log_info, "Attribute value = %s" % self.__rsp.timer

#------------------------------------------------------------------
#    Read ProfileFileName attribute
#------------------------------------------------------------------
    def read_ProfileFileName(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ProfileFileName()"
        attr.set_value(self.__rsp.configFile)

#------------------------------------------------------------------
#    Write ProfileFileName attribute
#------------------------------------------------------------------
    def write_ProfileFileName(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ProfileFileName()"
        self.__rsp.write_attribute("ConfigFile", attr.get_write_value())
        print >> self.log_info, "Attribute value = %s" % self.__rsp.configFile


#------------------------------------------------------------------
#    Read Name attribute
#------------------------------------------------------------------
    def read_Name(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Name()"
        attr.set_value(str(self.__name))

#------------------------------------------------------------------
#    Write Name attribute
#------------------------------------------------------------------
    def write_Name(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Name()"
        self.__name =  attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__name

#------------------------------------------------------------------
#    Read Value attribute
#------------------------------------------------------------------
    def read_Value(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Value()"
        attr.set_value(str(self.__value))

#------------------------------------------------------------------
#    Write Value attribute
#------------------------------------------------------------------
    def write_Value(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Value()"
        self.__value =  attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__value

#------------------------------------------------------------------
#    Read AppendEntryFlag attribute
#------------------------------------------------------------------
    def read_AppendEntryFlag(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_AppendEntryFlag()"
        attr.set_value(self.__rsp.appendEntry)

#------------------------------------------------------------------
#    Write AppendEntryFlag attribute
#------------------------------------------------------------------
    def write_AppendEntryFlag(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_AppendEntryFlag()"
        self.__rsp.write_attribute("appendEntry", attr.get_write_value())
        print >> self.log_info, "Attribute value = %s" % \
            self.__rsp.appendEntry

#------------------------------------------------------------------
#    Read ScanDir attribute
#------------------------------------------------------------------
    def read_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanDir()"
        attr.set_value(self.__rsp.scanDir)

#------------------------------------------------------------------
#    Write ScanDir attribute
#------------------------------------------------------------------
    def write_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanDir()"
        self.__rsp.scanDir = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__rsp.scanDir

#------------------------------------------------------------------
#    Read ScanFile attribute
#------------------------------------------------------------------
    def read_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanFile()"
        attr.set_value(self.__rsp.scanFile)

#------------------------------------------------------------------
#    Write ScanFile attribute
#------------------------------------------------------------------
    def write_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanFile()"
        self.__rsp.scanFile = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__rsp.scanFile

#------------------------------------------------------------------
#    Read ScanID attribute
#------------------------------------------------------------------
    def read_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanID()"
        attr.set_value(self.__rsp.scanID)

#------------------------------------------------------------------
#    Read AvailableComponents attribute
#------------------------------------------------------------------
    def read_AvailableComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponents()"
        attr.set_value(self.__rsp.availableComponents())

#------------------------------------------------------------------
#    Read AvailableComponents attribute
#------------------------------------------------------------------
    def read_MandatoryComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponents()"
        attr.set_value(list(self.__rsp.mandatoryComponents()))

#------------------------------------------------------------------
#    Read AvailableComponents attribute
#------------------------------------------------------------------
    def read_PreselectableComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponents()"
        cps =[]
        try:
            cps = json.loads(self.__rsp.automaticComponentGroup).keys()
        except:
            pass    
        attr.set_value(cps)


#------------------------------------------------------------------
#    Read AvailableComponents attribute
#------------------------------------------------------------------
    def read_AvailableDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponents()"
        ds = set(self.__rsp.availableDataSources())
        ds.update(self.__rsp.poolChannels())
        attr.set_value(list(sorted(ds)))

#------------------------------------------------------------------
#    Read Door attribute
#------------------------------------------------------------------
    def read_Door(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_Door()"
        attr.set_value(self.__rsp.door)

#------------------------------------------------------------------
#    Write Door attribute
#------------------------------------------------------------------
    def write_Door(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Door()"
        self.__rsp.write_attribute("Door", attr.get_write_value())
        print >> self.log_info, "Attribute value = %s" % self.__rsp.door

#------------------------------------------------------------------
#    Read MntGrp attribute
#------------------------------------------------------------------
    def read_MntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_MntGrp()"
        attr.set_value(self.__rsp.mntGrp)

#------------------------------------------------------------------
#    Write MntGrp attribute
#------------------------------------------------------------------
    def write_MntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_MntGrp()"
        self.__rsp.write_attribute("MntGrp", attr.get_write_value())
        print >> self.log_info, "Attribute value = %s" % self.__rsp.mntGrp


#------------------------------------------------------------------
#    Read UserData attribute
#------------------------------------------------------------------
    def read_UserData(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_UserData()"
        lst = []
        try:
            dct = json.loads(self.__rsp.dataRecord)
            for key, value in dct.items():
                mdt = {}
                mdt["name"] = key
                mdt["value"] = value
                lst.append(str(json.dumps(mdt)))
        except:
            pass
        attr.set_value(lst)


#------------------------------------------------------------------
#    Read ConfigVariables attribute
#------------------------------------------------------------------
    def read_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ConfigVariables()"
        lst = []
        try:
            dct = json.loads(self.__rsp.configVariables)
            for key, value in dct.items():
                mdt = {}
                mdt["name"] = key
                mdt["value"] = value
                lst.append(str(json.dumps(mdt)))
        except:
            pass
        attr.set_value(lst)


#==================================================================
#
#    NXSWriterControl command methods
#
#==================================================================

#------------------------------------------------------------------
#    LoadProfile command:
#
#    Description: Load server configuration
#
#------------------------------------------------------------------
    def LoadProfile(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::LoadProfile()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__rsp.loadConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- LoadProfile command State Machine -----------------
    def is_LoadProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    LoadProfile command:
#
#    Description: Save server configuration
#
#------------------------------------------------------------------
    def SaveProfile(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::SaveProfile()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__rsp.saveConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- SaveProfile command State Machine -----------------
    def is_SaveProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    UpdateMntGrpConfiguration:
#
#    Description: updates mntgrp configuration
#
#
#------------------------------------------------------------------
    def UpdateMntGrpConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateMntGrpConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__rsp.updateMntGrp()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)


#---- UpdateMntGrp command State Machine -----------------
    def is_UpdateMntGrpConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    PreselectComponents:
#
#    Description: checks existing controllers of pools for
#        AutomaticDataSources
#
#------------------------------------------------------------------
    def PreselectComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::PreselectComponents()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__rsp.updateControllers()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- PreselectComponents command State Machine -----------------
    def is_PreselectComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    AppendConfigVariable
#
#    Description: appends configuration variable
#
#------------------------------------------------------------------
    def AppendConfigVariable(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateConfigVariables()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            dct = json.loads(self.__rsp.ConfigVariables)
            dct[str(self.__name)] = str(self.__value) 
            self.__rsp.ConfigVariables = str(json.dumps(dct))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateConfigVariables command State Machine -----------------
    def is_AppendConfigVariable_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True
#------------------------------------------------------------------
#    RemoveConfigVariable
#
#    Description: appends configuration variable
#
#------------------------------------------------------------------
    def RemoveConfigVariable(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateConfigVariables()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            dct = json.loads(self.__rsp.ConfigVariables)
            dct.pop(str(self.__name))
            self.__rsp.ConfigVariables = str(json.dumps(dct))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateConfigVariables command State Machine -----------------
    def is_RemoveConfigVariable_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    AppendUserData
#
#    Description: appends configuration variable
#
#------------------------------------------------------------------
    def AppendUserData(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateUserDatas()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            dct = json.loads(self.__rsp.DataRecord)
            vl = ""
            try:
                vl = json.loads(self.__value) 
            except:
                vl = str(self.__value)
            dct[str(self.__name)] = vl
            self.__rsp.DataRecord = str(json.dumps(dct))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateUserDatas command State Machine -----------------
    def is_AppendUserData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    RemoveUserData
#
#    Description: appends configuration variable
#
#------------------------------------------------------------------
    def RemoveUserData(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateUserDatas()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            dct = json.loads(self.__rsp.DataRecord)
            dct.pop(str(self.__name))
            self.__rsp.DataRecord = str(json.dumps(dct))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateUserDatas command State Machine -----------------
    def is_RemoveUserData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    SelectChannel
#
#    Description: add experimental channel
#
#------------------------------------------------------------------
    def SelectChannel(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateConfigVariables()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            if self.__name in self.__rsp.availableComponents():
                dct = json.loads(self.__rsp.ComponentGroup)
                dct[str(self.__name)] = True
                self.__rsp.ComponentGroup = str(json.dumps(dct))
            else:
                dct = json.loads(self.__rsp.DataSourceGroup)
                dct[str(self.__name)] = True
                self.__rsp.DataSourceGroup = str(json.dumps(dct))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateConfigVariables command State Machine -----------------
    def is_SelectChannel_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    DeselectChannel
#
#    Description: removes experimental channel
#
#------------------------------------------------------------------
    def DeselectChannel(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateChannels()"
        try:
            dct = json.loads(self.__rsp.ComponentGroup)
            if self.__name in dct:
                dct[str(self.__name)] = False
                self.__rsp.ComponentGroup = str(json.dumps(dct))
            dct = json.loads(self.__rsp.DataSourceGroup)
            if self.__name in dct:
                dct[str(self.__name)] = False
                self.__rsp.DataSourceGroup = str(json.dumps(dct))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateChannels command State Machine -----------------
    def is_DeselectChannel_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    ChannelsOfType:
#
#    Description: updates mntgrp configuration
#
#
#------------------------------------------------------------------
    def ChannelsOfType(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::ChannelsOfType()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            allch = set(self.__rsp.availableComponents())
            allch.update(set(self.__rsp.availableDataSources()))
            allch.update(set(json.loads(self.__rsp.fullDeviceNames).keys()))
            available = set()
            if self.__name:
                if self.__name in self.__groups.keys():
                    for gr in self.__groups[self.__name]:
                        filtered = fnmatch.filter(
                            allch, gr)
                        available.update(filtered)
                else:
                    filtered = fnmatch.filter(
                        allch, "*%s*" % self.__name)
                    available.update(filtered)
            else:
                available.update(allch)
            self.set_state(PyTango.DevState.ON)
            return list(available)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)


#---- UpdateMntGrp command State Machine -----------------
    def is_ChannelsOfType_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    DescribeChannel:
#
#    Description: describe channel
#
#
#------------------------------------------------------------------
    def DescribeChannel(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::DescribeChannel()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            names = self.__name.split() 
            
            cpdesc =  json.loads(self.__rsp.Description)
            avcp = self.__rsp.availableComponents()
            avds = self.__rsp.availableDataSources()
            fullpool = json.loads(self.__rsp.fullDeviceNames)
            dslist = []
            for name in names:
                if name in avcp:
                    found = False
                    for grp in cpdesc:
                        for cp in grp.keys():
                            if cp == name:
                                dss = grp[cp]
                                for ds in dss.keys():
                                    for vds in dss[ds]:
                                        elem = {}
                                        elem["dsname"] = ds
                                        elem["strategy"] = vds[0]
                                        elem["dstype"] = vds[1]
                                        elem["record"] = vds[2]
                                        elem["nxtype"] = vds[3]
                                        elem["shape"] = vds[4]
                                        elem["cpname"] = cp
                                        dslist.append(json.dumps(elem))
                                found = True         
                                break
                            if found:
                                break
                
                if name in fullpool.keys():
                    if name in fullpool.keys():
                        dslist.append(str(json.dumps(
                                    {"dsname": name, 
                                     "dstype": "CLIENT", 
                                     "record": fullpool[name]})))
                if name in avds:
                    desc = self.__rsp.getSourceDescription([str(name)])
                    if desc:
                        dslist.append(str(desc[0]))
            self.set_state(PyTango.DevState.ON)
            return dslist
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)


#---- UpdateMntGrp command State Machine -----------------
    def is_DescribeChannel_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#==================================================================
#
##    NXSWriterControlClass class definition
#
#==================================================================
class NXSWriterControlClass(PyTango.DeviceClass):

    ##    Class Properties
    class_property_list = {
        }

    ##    Device Properties
    device_property_list = {
       'NXSRecSelector':
           [PyTango.DevString,
            "Selector Server",
            []],
       'ChannelTypes':
           [PyTango.DevString,
            "types of experimental channels",
            []],
        }

    ##    Command definitions
    cmd_list = {
        'LoadProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'SaveProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateMntGrpConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ChannelsOfType':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "available channels of a given type"]],
        'DescribeChannel':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "datasource description"]],
        'PreselectComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'AppendConfigVariable':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'RemoveConfigVariable':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'AppendUserData':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'RemoveUserData':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'SelectChannel':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'DeselectChannel':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        }
    
    ##    Attribute definitions
    attr_list = {
        'SelectedChannels':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                'label':"Selected Channels",
                'description':"list of Selected Components and DataSources",
                }],
        'AvailableComponents':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                'label':"Available Components",
                'description':"list of available components",
                }],
        'MandatoryComponents':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                'label':"Mandatory Components",
                'description':"list of mandatory components",
                }],
        'PreselectableComponents':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                'label':"Preselectable Components",
                'description':"list of preselectable components",
                }],
        'AvailableDataSources':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                'label':"Available DataSources",
                'description':"list of available data-sources",
                }],
        'Name':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'label':"Item Name",
                'description':"Item name",
                }],
        'Value':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'label':"Item Value",
                'description':"Item value",
                }],
        'Timers':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ_WRITE, 100],
             {
                'label':"Timers",
                'description':"Master timer and optional extra timers",
                }],
        'MntGrp':
            [[PyTango.DevString,
             PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'label':" Measurement Group",
                 'description':" Measurement Group",
                }],
        'ScanDir':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'label':"Scan Directory",
                'description':"Scan Directory",
                }],
        'ScanID':
            [[PyTango.DevLong,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'label':"Scan ID",
                'description':"Scan ID",
                }],
        'ScanFile':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ_WRITE, 50],
             {
                'label':"Scan File(s)",
                'description':"Scan File(s)",
                }],
        'Door':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'label':"Door",
                'description':"Door",
                }],
        'AppendEntryFlag':
            [[PyTango.DevBoolean,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'label':"Append Entry",
                'description':"flag for entry  appending ",
                }],
        'ProfileFileName':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Profile File with its Path",
                'description':"Profile file with its full path",
            }],
         'UserData':
             [[PyTango.DevString,
               PyTango.SPECTRUM,
               PyTango.READ, 1000],
             {
                 'label':"User Data",
                 'description':"Listo of User Data Records",
                 }],
        'ConfigVariables':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
              PyTango.READ, 1000],
             {
                'label':"Configuration Variables",
                'description':"configuration variables"
                +" for templated components",
                }],

        }

#------------------------------------------------------------------
##    Nxsrecselectorclass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name)
        print "In NXSWriterControlClass  constructor"

#==================================================================
#
#    NXSWriterControl class main method
#
#==================================================================
if __name__ == '__main__':
    pass
