#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        NXSRecSettings.py
#
# description : Python source for the NXSRecSettings and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                NXSRecSettings are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys


#==================================================================
#   NXSRecSettings Class Description:
#
#         Tango Server for Nexus Sardana Recorder Settings
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :   Server is ON
#   DevState.RUNNING : Performing a query
#==================================================================


from Settings import Settings as STG

class NXSRecSettings(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        ## Recorder Settings
        self.stg = STG(self)
        NXSRecSettings.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print >> self.log_info, "[Device delete_device method] for device",self.get_name()
        if hasattr(self, 'stg') and  self.stg :
            del self.stg
            self.stg = None
        self.set_state(PyTango.DevState.OFF)

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print >> self.log_info, "In ", self.get_name(), "::init_device()"
        if hasattr(self, 'stg') and  self.stg :
            del self.stg
            self.stg = None
        self.stg = STG(self)
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print >> self.log_info, "In ", self.get_name(), "::always_excuted_hook()"

#==================================================================
#
#    NXSRecSettings read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print >> self.log_info, "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read Components attribute
#------------------------------------------------------------------
    def read_Components(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Components()"
        attr.set_value(self.stg.state["components"])


#------------------------------------------------------------------
#    Write Components attribute
#------------------------------------------------------------------
    def write_Components(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Components()"
        self.stg.state["components"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["components"]

#------------------------------------------------------------------
#    Read AutomaticComponents attribute
#------------------------------------------------------------------
    def read_AutomaticComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_AutomaticComponents()"
        attr.set_value(self.stg.state["automaticComponents"])


#------------------------------------------------------------------
#    Write ComponentGroup attribute
#------------------------------------------------------------------
    def write_AutomaticComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_AutomaticComponents()"
        self.stg.state["automaticComponents"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["automaticComponents"]



#------------------------------------------------------------------
#    Read ConfigDevice attribute
#------------------------------------------------------------------
    def read_ConfigDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ConfigDevice()"
        attr.set_value(self.stg.configDevice)


#------------------------------------------------------------------
#    Write ConfigDevice attribute
#------------------------------------------------------------------
    def write_ConfigDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ConfigDevice()"
        self.stg.configDevice = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.configDevice


#------------------------------------------------------------------
#    Read WriterDevice attribute
#------------------------------------------------------------------
    def read_WriterDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_WriterDevice()"
        attr.set_value(self.stg.writerDevice)


#------------------------------------------------------------------
#    Write WriterDevice attribute
#------------------------------------------------------------------
    def write_WriterDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_WriterDevice()"
        self.stg.writerDevice = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.writerDevice

#------------------------------------------------------------------
#    Read DataRecord attribute
#------------------------------------------------------------------
    def read_DataRecord(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataRecord()"
        attr.set_value(self.stg.state["dataRecord"])


#------------------------------------------------------------------
#    Write DataRecord attribute
#------------------------------------------------------------------
    def write_DataRecord(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DataRecord()"
        self.stg.state["dataRecord"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["dataRecord"]

#------------------------------------------------------------------
#    Read DataSources attribute
#------------------------------------------------------------------
    def read_DataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataSources()"
        attr.set_value(self.stg.state["dataSources"])


#------------------------------------------------------------------
#    Write DataSources attribute
#------------------------------------------------------------------
    def write_DataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DataSources()"
        self.stg.state["dataSources"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["dataSources"]


#------------------------------------------------------------------
#    Read AppendEntry attribute
#------------------------------------------------------------------
    def read_AppendEntry(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_AppendEntry()"
        attr.set_value(self.stg.state["appendEntry"])


#------------------------------------------------------------------
#    Write AppendEntry attribute
#------------------------------------------------------------------
    def write_AppendEntry(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_AppendEntry()"
        self.stg.state["appendEntry"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["appendEntry"]
        

#------------------------------------------------------------------
#    Read ComponentsFromMntGrp attribute
#------------------------------------------------------------------
    def read_ComponentsFromMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ComponentsFromMntGrp()"
        attr.set_value(self.stg.state["componentsFromMntGrp"])


#------------------------------------------------------------------
#    Write ComponentsFromMntGrp attribute
#------------------------------------------------------------------
    def write_ComponentsFromMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ComponentsFromMntGrp()"
        self.stg.state["componentsFromMntGrp"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["componentsFromMntGrp"]


#------------------------------------------------------------------
#    Read DynamicComponents attribute
#------------------------------------------------------------------
    def read_DynamicComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DynamicComponents()"
        attr.set_value(self.stg.state["dynamicComponents"])


#------------------------------------------------------------------
#    Write DynamicComponents attribute
#------------------------------------------------------------------
    def write_DynamicComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DynamicComponents()"
        self.stg.state["dynamicComponents"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["dynamicComponents"]


#------------------------------------------------------------------
#    Read DynamicLinks attribute
#------------------------------------------------------------------
    def read_DynamicLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DynamicLinks()"
        attr.set_value(self.stg.state["dynamicLinks"])

#------------------------------------------------------------------
#    Write DynamicLinks attribute
#------------------------------------------------------------------
    def write_DynamicLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DynamicLinks()"
        self.stg.state["dynamicLinks"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["dynamicLinks"]


#------------------------------------------------------------------
#    Read DynamicPath attribute
#------------------------------------------------------------------
    def read_DynamicPath(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DynamicPath()"
        attr.set_value(self.stg.state["dynamicPath"])


#------------------------------------------------------------------
#    Write DynamicPath attribute
#------------------------------------------------------------------
    def write_DynamicPath(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DynamicPath()"
        self.stg.state["dynamicPath"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["dynamicPath"]


#------------------------------------------------------------------
#    Read ConfigVariables attribute
#------------------------------------------------------------------
    def read_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ConfigVariables()"
        attr.set_value(self.stg.state["configVariables"])


#------------------------------------------------------------------
#    Write ConfigVariables attribute
#------------------------------------------------------------------
    def write_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ConfigVariables()"
        self.stg.state["configVariables"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["configVariables"]


#------------------------------------------------------------------
#    Read ScanFile attribute
#------------------------------------------------------------------
    def read_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanFile()"
        attr.set_value(self.stg.state["scanFile"])


#------------------------------------------------------------------
#    Write ScanFile attribute
#------------------------------------------------------------------
    def write_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanFile()"
        self.stg.state["scanFile"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["scanFile"]


#------------------------------------------------------------------
#    Read ConfigFile attribute
#------------------------------------------------------------------
    def read_ConfigFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ConfigFile()"
        attr.set_value(self.stg.configFile)


#------------------------------------------------------------------
#    Write ConfigFile attribute
#------------------------------------------------------------------
    def write_ConfigFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ConfigFile()"
        self.stg.configFile = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.configFile


#------------------------------------------------------------------
#    Read ScanDir attribute
#------------------------------------------------------------------
    def read_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanDir()"
        attr.set_value(self.stg.state["scanDir"])


#------------------------------------------------------------------
#    Write ScanDir attribute
#------------------------------------------------------------------
    def write_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanDir()"
        self.stg.state["scanDir"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["scanDir"]


#------------------------------------------------------------------
#    Read ScanID attribute
#------------------------------------------------------------------
    def read_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanID()"
        attr.set_value(self.stg.state["scanID"])


#------------------------------------------------------------------
#    Write ScanID attribute
#------------------------------------------------------------------
    def write_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanID()"
        self.stg.state["scanID"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["scanID"]


#------------------------------------------------------------------
#    Read ActiveMntGrp attribute
#------------------------------------------------------------------
    def read_ActiveMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ActiveMntGrp()"
        attr.set_value(self.stg.state["activeMntGrp"])


#------------------------------------------------------------------
#    Write ActiveMntGrp attribute
#------------------------------------------------------------------
    def write_ActiveMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ActiveMntGrp()"
        self.stg.state["activeMntGrp"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["activeMntGrp"]


#------------------------------------------------------------------
#    Read TimeZone attribute
#------------------------------------------------------------------
    def read_TimeZone(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_TimeZone()"
        attr.set_value(self.stg.state["timeZone"])


#------------------------------------------------------------------
#    Write TimeZone attribute
#------------------------------------------------------------------
    def write_TimeZone(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_TimeZone()"
        self.stg.state["timeZone"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["timeZone"]




#==================================================================
#
#    NXSRecSettings command methods
#
#==================================================================

#------------------------------------------------------------------
#    LoadConfiguration command:
#
#    Description: Load server configuration
#                
#------------------------------------------------------------------
    def LoadConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::LoadConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.loadConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        


#---- LoadConfiguration command State Machine -----------------
    def is_LoadConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    LoadConfiguration command:
#
#    Description: Save server configuration
#                
#------------------------------------------------------------------
    def SaveConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::SaveConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.saveConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        


#---- SaveConfiguration command State Machine -----------------
    def is_SaveConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    AvailableComponents command:
#
#    Description: Returns a list of available component names
#                
#    argout: DevVarStringArray    list of available component names
#------------------------------------------------------------------
    def AvailableComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::AvailableComponents()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.availableComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- AvailableComponents command State Machine -----------------
    def is_AvailableComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#------------------------------------------------------------------
#    AvailableDataSources command:
#
#    Description: Returns a list of available DataSource names
#                
#    argout: DevVarStringArray    list of available DataSource names
#------------------------------------------------------------------
    def AvailableDataSources(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::AvailableDataSources()"
        #    Add your own code here
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.availableDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- AvailableDataSources command State Machine -----------------
    def is_AvailableDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    MandatoryComponents command:
#
#    Description: Sets the mandatory components
#                
#    argout: DevVarStringArray    component names
#------------------------------------------------------------------
    def MandatoryComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::MandatoryComponents()"
        #    Add your own code here
        
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.mandatoryComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout


#---- MandatoryComponents command State Machine -----------------
    def is_MandatoryComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#==================================================================
#
#    NXSRecSettingsClass class definition
#
#==================================================================
class NXSRecSettingsClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'LoadConfiguration':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'SaveConfiguration':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'AvailableComponents':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarStringArray, "list of available component names"]],
        'AvailableDataSources':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarStringArray, "list of available DataSource names"]],
        'MandatoryComponents':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarStringArray, "component names"]],
        }


    #    Attribute definitions
    attr_list = {
        'Components':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Selected Components",
                'description':"JSON list of Selected Components",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'AutomaticComponents':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Automatic Components",
                'description':"JSON list of components available for automatic selection",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'ConfigDevice':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Configuration Device",
                'description':"Configuration device",
                'Memorized':"true",
            } ],
        'WriterDevice':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Writer Device",
                'description':"Writer device",
                'Memorized':"true",
            } ],
        'DataRecord':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Client Data Record",
                'description':"JSON dictionary with Client Data Record",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'DataSources':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Selected Datasources",
                'description':"JSON list of Selected Datasources",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'AppendEntry':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Append Entry",
                'description':"flag for entry  appending ",
                'Memorized':"true",
            } ],
        'ComponentsFromMntGrp':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Select Components from MntGrp",
                'description':"select components from mntgrp",
                'Memorized':"true",
            } ],
        'DynamicComponents':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Dynamic Components",
                'description':"create dynamic components",
                'Memorized':"true",
            } ],
        'DynamicLinks':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Links for Dynamic Components",
                'description':"create links for dynamic components",
                'Memorized':"true",
            } ],
        'DynamicPath':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Path for Dynamic Components",
                'description':"path for dynamic components",
                'Memorized':"true",
            } ],
        'ConfigVariables':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Configuration Variables",
                'description':"JSON dictionary with configuration variables for templated components",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'ScanFile':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Scan File",
                'description':"scan file",
                'Memorized':"true",
            } ],
        'ConfigFile':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Config File",
                'description':"config file",
                'Memorized':"true",
            } ],
        'ScanDir':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Scan Directory",
                'description':"scan directory",
                'Memorized':"true",
            } ],
        'ScanID':
            [[PyTango.DevLong64,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Scan ID",
                'description':"scan ID",
                'Memorized':"true",
            } ],
        'ActiveMntGrp':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Active Measurement Group",
                'description':"active measurement group",
                'Memorized':"true",
            } ],
        'TimeZone':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Time Zone",
                'description':"timezone",
                'Memorized':"true",
            } ],
        }


#------------------------------------------------------------------
#    NXSRecSettingsClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In NXSRecSettingsClass  constructor"

#==================================================================
#
#    NXSRecSettings class main method
#
#==================================================================
if __name__ == '__main__':
    pass
