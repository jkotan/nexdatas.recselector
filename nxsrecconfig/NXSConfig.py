#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        NXSRecSelector.py
#
# description : Python source for the NXSRecSelector and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                NXSRecSelector are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

""" Selector Server for NeXus Sardana Recorder """

import PyTango


#==================================================================
#   NXSRecSelector Class Description:
#
#         Tango Server for Nexus Sardana Recorder Settings
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :   Server is ON
#   DevState.RUNNING : Performing a query
#==================================================================

from .Settings import Settings as STG


## NXSRecSelector server interface
class NXSRecSelector(PyTango.Device_4Impl):

    #------------------------------------------------------------------
    #    Device constructor
    #------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.debug_stream("In __init__()")
        ## Recorder Settings
        self.__stg = None
        self.__toupdate = ['ConfigDevice', 'Door']

        NXSRecSelector.init_device(self)

    #------------------------------------------------------------------
    #    Device destructor
    #------------------------------------------------------------------
    def delete_device(self):
        self.debug_stream("In delete_device()")
        if hasattr(self, 'stg') and self.__stg:
            del self.__stg
            self.__stg = None
        self.set_state(PyTango.DevState.OFF)

    #------------------------------------------------------------------
    #    Device initialization
    #------------------------------------------------------------------
    def init_device(self):
        self.debug_stream("In init_device()")
        if hasattr(self, 'stg') and self.__stg:
            del self.__stg
            self.__stg = None
        self.get_device_properties(self.get_device_class())
        numberofthreads = self.NumberOfThreads or None
        self.__stg = STG(self, numberofthreads)
        self.set_state(PyTango.DevState.ON)
        self.__stg.poolBlacklist = self.PoolBlacklist or []
        self.__stg.timerFilters = self.TimerFilters or ["*dgg*", "*/ctctrl0*"]
        self.__stg.mutedChannelFilters = self.MutedChannelFilters \
            or ["*tip551*"]
        self.__stg.adminDataNames = self.AdminDataNames or []
        self.__stg.defaultPreselectedComponents = \
            self.DefaultPreselectedComponents or []

    #------------------------------------------------------------------
    #    Always excuted hook method
    #------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")

#==================================================================
#
#    NXSRecSelector read/write attribute methods
#
#==================================================================
    #------------------------------------------------------------------
    #    Read Attribute Hardware
    #------------------------------------------------------------------
    def read_attr_hardware(self, _):
        self.debug_stream("In read_attr_hardware()")

    #------------------------------------------------------------------
    #    Read Components attribute
    #------------------------------------------------------------------
    def read_Components(self, attr):
        self.debug_stream("In read_Components()")
        attr.set_value(self.__stg.components)

    #------------------------------------------------------------------
    #    Read DescriptionErrors attribute
    #------------------------------------------------------------------
    def read_DescriptionErrors(self, attr):
        self.debug_stream("In read_DescriptionErrors()")
        attr.set_value(self.__stg.descriptionErrors)

    #------------------------------------------------------------------
    #    Read Version attribute
    #------------------------------------------------------------------
    def read_Version(self, attr):
        self.debug_stream("In read_Version()")
        attr.set_value(self.__stg.version)

    #------------------------------------------------------------------
    #    Read Door attribute
    #------------------------------------------------------------------
    def read_Door(self, attr):
        self.debug_stream("In read_Door()")
        attr.set_value(self.__stg.door)

    #------------------------------------------------------------------
    #    Write Door attribute
    #------------------------------------------------------------------
    def write_Door(self, attr):
        self.debug_stream("In write_Door()")
        self.__stg.door = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read StepDataSources attribute
    #------------------------------------------------------------------
    def read_StepDataSources(self, attr):
        self.debug_stream("In read_StepDataSources()")
        attr.set_value(self.__stg.stepdatasources or "")

    #------------------------------------------------------------------
    #    Write StepDataSources attribute
    #------------------------------------------------------------------
    def write_StepDataSources(self, attr):
        self.debug_stream("In write_StepDataSources()")
        if self.is_StepDataSources_write_allowed():
            self.__stg.stepdatasources = attr.get_write_value() or ""
        else:
            self.warn_stream("To change the settings please close the server.")
            raise Exception(
                "To change the settings please close the server.")

    #---- StepDataSources attribute Write State Machine -----------------
    def is_StepDataSources_write_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    Read ConfigDevice attribute
    #------------------------------------------------------------------
    def read_ConfigDevice(self, attr):
        self.debug_stream("In read_ConfigDevice()")
        attr.set_value(self.__stg.configDevice)

    #------------------------------------------------------------------
    #    Write ConfigDevice attribute
    #------------------------------------------------------------------
    def write_ConfigDevice(self, attr):
        self.debug_stream("In write_ConfigDevice()")
        self.__stg.configDevice = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read MntGrp attribute
    #------------------------------------------------------------------
    def read_MntGrp(self, attr):
        self.debug_stream("In read_MntGrp()")
        attr.set_value(self.__stg.mntGrp)

    #------------------------------------------------------------------
    #    Write MntGrp attribute
    #------------------------------------------------------------------
    def write_MntGrp(self, attr):
        self.debug_stream("In write_MntGrp()")
        self.__stg.mntGrp = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ScanDir attribute
    #------------------------------------------------------------------
    def read_ScanDir(self, attr):
        self.debug_stream("In read_ScanDir()")
        attr.set_value(self.__stg.scanDir)

    #------------------------------------------------------------------
    #    Write ScanDir attribute
    #------------------------------------------------------------------
    def write_ScanDir(self, attr):
        self.debug_stream("In write_ScanDir()")
        self.__stg.scanDir = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ScanFile attribute
    #------------------------------------------------------------------
    def read_ScanFile(self, attr):
        self.debug_stream("In read_ScanFile()")
        attr.set_value(self.__stg.scanFile or "")

    #------------------------------------------------------------------
    #    Write ScanFile attribute
    #------------------------------------------------------------------
    def write_ScanFile(self, attr):
        self.debug_stream("In write_ScanFile()")
        self.__stg.scanFile = attr.get_write_value() or ""

    #------------------------------------------------------------------
    #    Read ScanID attribute
    #------------------------------------------------------------------
    def read_ScanID(self, attr):
        self.debug_stream("In read_ScanID()")
        attr.set_value(self.__stg.scanID)

    #------------------------------------------------------------------
    #    Write ScanID attribute
    #------------------------------------------------------------------
    def write_ScanID(self, attr):
        self.debug_stream("In write_ScanID()")
        self.__stg.scanID = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read WriterDevice attribute
    #------------------------------------------------------------------
    def read_WriterDevice(self, attr):
        self.debug_stream("In read_WriterDevice()")
        attr.set_value(self.__stg.writerDevice)

    #------------------------------------------------------------------
    #    Write WriterDevice attribute
    #------------------------------------------------------------------
    def write_WriterDevice(self, attr):
        self.debug_stream("In write_WriterDevice()")
        self.__stg.writerDevice = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read DeviceGroups attribute
    #------------------------------------------------------------------
    def read_DeviceGroups(self, attr):
        self.debug_stream("In read_DeviceGroups()")
        attr.set_value(self.__stg.deviceGroups)

    #------------------------------------------------------------------
    #    Write DeviceGroups attribute
    #------------------------------------------------------------------
    def write_DeviceGroups(self, attr):
        self.debug_stream("In write_DeviceGroups()")
        self.__stg.deviceGroups = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read UserData attribute
    #------------------------------------------------------------------
    def read_UserData(self, attr):
        self.debug_stream("In read_UserData()")
        attr.set_value(self.__stg.userData)

    #------------------------------------------------------------------
    #    Write UserData attribute
    #------------------------------------------------------------------
    def write_UserData(self, attr):
        self.debug_stream("In write_UserData()")
        self.__stg.userData = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read DataSources attribute
    #------------------------------------------------------------------
    def read_DataSources(self, attr):
        self.debug_stream("In read_DataSources()")
        attr.set_value(self.__stg.dataSources)

    #------------------------------------------------------------------
    #    Read ProfileConfiguration attribute
    #------------------------------------------------------------------
    def read_ProfileConfiguration(self, attr):
        self.debug_stream("In read_DataSources()")
        attr.set_value(self.__stg.profileConfiguration)

    #------------------------------------------------------------------
    #    Write ProfileConfiguration attribute
    #------------------------------------------------------------------
    def write_ProfileConfiguration(self, attr):
        self.debug_stream("In write_ProfileConfiguration()")
        self.__stg.profileConfiguration = attr.get_write_value()
        try:
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #------------------------------------------------------------------
    #    Read AppendEntry attribute
    #------------------------------------------------------------------
    def read_AppendEntry(self, attr):
        self.debug_stream("In read_AppendEntry()")
        attr.set_value(self.__stg.appendEntry)

    #------------------------------------------------------------------
    #    Write AppendEntry attribute
    #------------------------------------------------------------------
    def write_AppendEntry(self, attr):
        self.debug_stream("In write_AppendEntry()")
        self.__stg.appendEntry = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ConfigVariables attribute
    #------------------------------------------------------------------
    def read_ConfigVariables(self, attr):
        self.debug_stream("In read_ConfigVariables()")
        attr.set_value(self.__stg.configVariables)

    #------------------------------------------------------------------
    #    Write ConfigVariables attribute
    #------------------------------------------------------------------
    def write_ConfigVariables(self, attr):
        self.debug_stream("In write_ConfigVariables()")
        self.__stg.configVariables = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ProfileFile attribute
    #------------------------------------------------------------------
    def read_ProfileFile(self, attr):
        self.debug_stream("In read_ProfileFile()")
        attr.set_value(self.__stg.profileFile)

    #------------------------------------------------------------------
    #    Write ProfileFile attribute
    #------------------------------------------------------------------
    def write_ProfileFile(self, attr):
        self.debug_stream("In write_ProfileFile()")
        self.__stg.profileFile = attr.get_write_value()

    #==================================================================
    #
    #    NXSRecSelector command methods
    #
    #==================================================================

    #------------------------------------------------------------------
    #    LoadProfile command:
    #
    #    Description: Load server configuration
    #
    #------------------------------------------------------------------
    def LoadProfile(self):
        self.debug_stream("In LoadProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.loadProfile()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- LoadProfile command State Machine -----------------
    def is_LoadProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    FetchProfile command:
    #
    #    Description: Fetch server configuration
    #
    #------------------------------------------------------------------
    def FetchProfile(self):
        self.debug_stream("In FetchProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.fetchProfile()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- FetchProfile command State Machine -----------------
    def is_FetchProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SaveProfile command:
    #
    #    Description: Save server configuration
    #
    #------------------------------------------------------------------
    def SaveProfile(self):
        self.debug_stream("In SaveProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.saveProfile()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- SaveProfile command State Machine -----------------
    def is_SaveProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    StoreProfile command:
    #
    #    Description: Store server configuration
    #
    #------------------------------------------------------------------
    def StoreProfile(self):
        self.debug_stream("In StoreProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.storeProfile()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- StoreProfile command State Machine -----------------
    def is_StoreProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    PreselectComponents:
    #
    #    Description: checks existing controllers of pools for
    #        PreselectedDataSources
    #
    #------------------------------------------------------------------
    def PreselectComponents(self):
        self.debug_stream("In PreselectComponents()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.preselectComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- PreselectComponents command State Machine -----------------
    def is_PreselectComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ResetPreselectedComponents:
    #
    #    Description: reset PreselectedComponents
    #        to DefaultPreselectedComponents
    #
    #------------------------------------------------------------------
    def ResetPreselectedComponents(self):
        self.debug_stream("In ResetPreselectedComponents()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.resetPreselectedComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ResetPreselectedComponents command State Machine -----------------
    def is_ResetPreselectedComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    DeleteAllProfiles:
    #
    #    Description: deletes all profiles from Configuration Server
    #
    #------------------------------------------------------------------
    def DeleteAllProfiles(self):
        self.debug_stream("In DeleteAllProfiles()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.deleteAllProfiles()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- DeleteAllProfiles command State Machine -----------------
    def is_DeleteAllProfiles_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    UpdateConfigVariables:
    #
    #    Description: sends ConfigVariables into ConfigServer
    #        and updates serialno if appendEntry selected
    #
    #------------------------------------------------------------------
    def UpdateConfigVariables(self):
        self.debug_stream("In UpdateConfigVariables()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.updateConfigVariables()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- UpdateConfigVariables command State Machine -----------------
    def is_UpdateConfigVariables_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    IsMntGrpUpdated:
    #
    #    Description:  returns true if mntgrp was changed
    #
    #------------------------------------------------------------------
    def IsMntGrpUpdated(self):
        self.debug_stream("In IsMntGrpUpdated()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = bool(self.__stg.isMntGrpUpdated())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- IsMntGrpUpdated command State Machine -----------------
    def is_IsMntGrpUpdated_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    MntGrpConfiguration:
    #
    #    Description:  returns mntgrp configuration
    #
    #------------------------------------------------------------------
    def MntGrpConfiguration(self):
        self.debug_stream("In MntGrpConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.mntGrpConfiguration())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- MntGrpConfiguration command State Machine -----------------
    def is_MntGrpConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    UpdateMntGrp:
    #
    #    Description: updates mntgrp configuration
    #
    #
    #------------------------------------------------------------------
    def UpdateMntGrp(self):
        self.debug_stream("In UpdateMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.updateMntGrp())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- UpdateMntGrp command State Machine -----------------
    def is_UpdateMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SwitchProfile:
    #
    #    Description: switchs mntgrp configuration
    #
    #
    #------------------------------------------------------------------
    def SwitchProfile(self):
        self.debug_stream("In SwitchProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.switchProfile())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- SwitchProfile command State Machine -----------------
    def is_SwitchProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ImportMntGrp:
    #
    #    Description: imports active mntgrp configuration
    #
    #
    #------------------------------------------------------------------
    def ImportMntGrp(self):
        self.debug_stream("In ImportMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.importMntGrp()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ImportMntGrp command State Machine -----------------
    def is_ImportMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ImportEnvProfile:
    #
    #    Description: imports all environment variables
    #
    #
    #------------------------------------------------------------------
    def ImportEnvProfile(self):
        self.debug_stream("In ImportEnvProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.importEnvProfile()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ImportMntGrp command State Machine -----------------
    def is_ImportEnv_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ExportEnvProfile:
    #
    #    Description: exports all environment variables
    #
    #
    #------------------------------------------------------------------
    def ExportEnvProfile(self):
        self.debug_stream("In ExportEnvProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.exportEnvProfile()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ExportMntGrp command State Machine -----------------
    def is_ExportEnv_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableTimers command:
    #
    #    Description: Returns a list of available component names
    #
    #    argout: DevVarStringArray    list of available component names
    #------------------------------------------------------------------
    def AvailableTimers(self):
        self.debug_stream("In AvailableTimers()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableTimers()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableTimers command State Machine -----------------
    def is_AvailableTimers_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    MutedChannels command:
    #
    #    Description: Returns a list of muted channel names
    #
    #    argout: DevVarStringArray    list of muted channel names
    #------------------------------------------------------------------
    def MutedChannels(self):
        self.debug_stream("In MutedChannels()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.mutedChannels()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- MutedChannels command State Machine -----------------
    def is_MutedChannels_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableComponents command:
    #
    #    Description: Returns a list of available component names
    #
    #    argout: DevVarStringArray    list of available component names
    #------------------------------------------------------------------
    def AvailableComponents(self):
        self.debug_stream("In AvailableComponents()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableComponents command State Machine -----------------
    def is_AvailableComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ComponentDescription command:
    #
    #    Description: Returns a list of available component names
    #
    #    argout: DevString   list of available component names
    #------------------------------------------------------------------
    def ComponentDescription(self):
        self.debug_stream("In ComponentDescription()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.componentDescription()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- ComponentDescription command State Machine -----------------
    def is_ComponentDescription_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SetScanEnvVariables command:
    #
    #    Description: Stores ScanDir, ScanFile and NeXusSelectorDevice
    #                 in environment variables
    #
    #    argout: DevString    json dictionary with environment data
    #    argout: DevLong    scan ID
    #------------------------------------------------------------------
    def SetScanEnvVariables(self, argin):
        self.debug_stream("In SetScanEnvVariables()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = int(self.__stg.setScanEnvVariables(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- SetScanEnvVariables command State Machine -----------------
    def is_SetScanEnvVariables_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    FullDeviceNames command:
    #
    #    Description: Returns a JSON with full device names for all aliases
    #
    #    argout: DevString JSON dictionary with full device names
    #------------------------------------------------------------------
    def FullDeviceNames(self):
        self.debug_stream("In FullDeviceNames()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.fullDeviceNames()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- FullDeviceNames command State Machine -----------------
    def is_FullDeviceNames_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ScanEnvVariables command:
    #
    #    Description: Fetches ScanDir, ScanFile, ScanID and
    #                 NeXusSelectorDevice
    #                 in environment variables
    #
    #    argout: DevString    json dictionary with environment data
    #------------------------------------------------------------------
    def ScanEnvVariables(self):
        self.debug_stream("In ScanEnvVariables()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.__stg.scanEnvVariables())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- ScanEnvVariables command State Machine -----------------
    def is_ScanEnvVariables_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    VariableComponents command:
    #
    #    Description: Returns a list of available component names
    #
    #    argout: DevString    list of available component names
    #------------------------------------------------------------------
    def VariableComponents(self):
        self.debug_stream("In VariableComponents()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.variableComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- VariableComponents command State Machine -----------------
    def is_VariableComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableProfiles command:
    #
    #    Description: Returns a list of available selection names
    #
    #    argout: DevVarStringArray    list of available selection names
    #------------------------------------------------------------------
    def AvailableProfiles(self):
        self.debug_stream("In AvailableProfiles()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableProfiles()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableProfiles command State Machine -----------------
    def is_AvailableProfiles_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableMntGrps command:
    #
    #    Description: Returns a list of available mntgrp names
    #
    #    argout: DevVarStringArray    list of available mntgrp names
    #------------------------------------------------------------------
    def AvailableMntGrps(self):
        self.debug_stream("In AvailableMntGrps()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableMntGrps()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableMntGrps command State Machine -----------------
    def is_AvailableMntGrps_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableDataSources command:
    #
    #    Description: Returns a list of available DataSource names
    #
    #    argout: DevVarStringArray    list of available DataSource names
    #------------------------------------------------------------------
    def AvailableDataSources(self):
        self.debug_stream("In AvailableDataSources()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableDataSources command State Machine -----------------
    def is_AvailableDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    PoolElementNames command:
    #
    #    Description: Returns a list of available pool channels
    #
    #    argin:  DevString            name of pool list attribute
    #    argout: DevVarStringArray    list of available pool elements
    #------------------------------------------------------------------
    def PoolElementNames(self, argin):
        self.debug_stream("In PoolElementNames()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.poolElementNames(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- PoolElementNames command State Machine -----------------
    def is_PoolElementNames_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ComponentDataSources command:
    #
    #    Description: Provides the component datasources
    #
    #    argout: DevVarStringArray    component names
    #------------------------------------------------------------------
    def ComponentDataSources(self):
        self.debug_stream("In ComponentDataSources()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.componentDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- ComponentDataSources command State Machine -----------------
    def is_ComponentDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SelectedDataSources command:
    #
    #    Description: Provides the selected datasources
    #
    #    argout: DevVarStringArray    component names
    #------------------------------------------------------------------
    def SelectedDataSources(self):
        self.debug_stream("In SelectedDataSources()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.selectedDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- SelectedDataSources command State Machine -----------------
    def is_SelectedDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AdministratorDataNames command:
    #
    #    Description: Provides Administrator Data Names
    #
    #    argout: DevVarStringArray    data record names
    #------------------------------------------------------------------
    def AdministratorDataNames(self):
        self.debug_stream("In AdministratorDataNames()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.administratorDataNames()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- AdministratorDataNames command State Machine -----------------
    def is_AdministratorDataNames_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    MandatoryComponents command:
    #
    #    Description: Sets the mandatory components
    #
    #    argout: DevVarStringArray    component names
    #------------------------------------------------------------------
    def MandatoryComponents(self):
        self.debug_stream("In MandatoryComponents()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.mandatoryComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- MandatoryComponents command State Machine -----------------
    def is_MandatoryComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SelectedComponents command:
    #
    #    Description: Sets the selected components
    #
    #    argout: DevVarStringArray    component names
    #------------------------------------------------------------------
    def SelectedComponents(self):
        self.debug_stream("In SelectedComponents()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.selectedComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- SelectedComponents command State Machine -----------------
    def is_SelectedComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    PreselectedComponents command:
    #
    #    Description: Sets the preselected components
    #
    #    argout: DevVarStringArray    component names
    #------------------------------------------------------------------
    def PreselectedComponents(self):
        self.debug_stream("In PreselectedComponents()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.preselectedComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- PreselectedComponents command State Machine -----------------
    def is_PreselectedComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    CreateDynamicComponent command:
    #
    #    Description: create dynamic component
    #
    #    argin:  DevVarStringArray    list of datasource parameters
    #    argout: DevVarString         name of created dynamic component
    #------------------------------------------------------------------
    def CreateDynamicComponent(self, argin):
        self.debug_stream("In CreateDynamicComponent()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.createDynamicComponent(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- CreateDynamicComponent command State Machine -----------------
    def is_CreateDynamicComponent_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

    #------------------------------------------------------------------
    #    RemoveDynamicComponent command:
    #
    #    Description: Deletes the given dynamic component
    #
    #    argin:  DevString  dynamic component name
    #------------------------------------------------------------------
    def RemoveDynamicComponent(self, argin):
        self.debug_stream("In RemoveDynamicComponent()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.removeDynamicComponent(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- RemoveDynamicComponent command State Machine -----------------
    def is_RemoveDynamicComponent_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    DeleteProfile command:
    #
    #    Description: Deletes the given mntgrp
    #
    #    argin:  DevString  measurement group name
    #------------------------------------------------------------------
    def DeleteProfile(self, argin):
        self.debug_stream("In DeleteProfile()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.deleteProfile(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- DeleteProfile command State Machine -----------------
    def is_DeleteProfile_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ChannelProperties command:
    #
    #    Description: JSON dictionary with channel properties
    #                 {channel:property}
    #
    #    argin:  DevString    property type
    #    argout: DevString    JSON dictionary with channel properties
    #------------------------------------------------------------------
    def ChannelProperties(self, argin):
        self.debug_stream("In ChannelProperties()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.channelProperties(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- ChannelProperties command State Machine -----------------
    def is_ChannelProperties_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SetChannelProperties command: SetChannelProperties
    #
    #    Description: set Channel Properties of given type
    #
    #    argin:  DevVarStringArray   two element list with a property type and
    #                                 JSON value dictionary {channel:property}
    #------------------------------------------------------------------
    def SetChannelProperties(self, argin):
        self.debug_stream("In SetChannelProperties()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.setChannelProperties(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- SetChannelProperties command State Machine -----------------
    def is_SetChannelProperties_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ComponentClientSources command:
    #
    #    Description: describes client datasources from components
    #
    #    argin:  DevVarStringArray    list of component names
    #    argout: DevVarString         description of component datasources
    #------------------------------------------------------------------
    def ComponentClientSources(self, argin):
        self.debug_stream("In ComponentClientSources()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.componentClientSources(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- ComponentClientSources command State Machine -----------------
    def is_ComponentClientSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    DataSourceDescription command:
    #
    #    Description: descrive datasources
    #
    #    argin:  DevVarStringArray    list of datasource names
    #    argout: DevVarStringArray    description of datasources
    #------------------------------------------------------------------
    def DataSourceDescription(self, argin):
        self.debug_stream("In DataSourceDescription()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.dataSourceDescription(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- DataSourceDescription command State Machine -----------------
    def is_DataSourceDescription_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

    #------------------------------------------------------------------
    #    CreateWriterConfiguration command:
    #
    #    Description: create configuration from the given components
    #
    #    argin:  DevVarStringArray    list of component names
    #    argout: DevVarString         XML configuration string
    #------------------------------------------------------------------
    def CreateWriterConfiguration(self, argin):
        self.debug_stream("In CreateWriterConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.createWriterConfiguration(argin)
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- CreateWriterConfiguration command State Machine -----------------
    def is_CreateWriterConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#==================================================================
#
##    NXSRecSelectorClass class definition
#
#==================================================================
class NXSRecSelectorClass(PyTango.DeviceClass):

    ##    Class Properties
    class_property_list = {
    }

    ##    Device Properties
    device_property_list = {
        'NumberOfThreads':
        [PyTango.DevLong,
         "maximal number of threads",
         [20]],
        'PoolBlacklist':
        [PyTango.DevVarStringArray,
         "blacklist of pools",
         []],
        'TimerFilters':
        [PyTango.DevVarStringArray,
         "list of timer filters",
         []],
        'MutedChannelFilters':
        [PyTango.DevVarStringArray,
         "list of muted channel filters",
         []],
        'AdminDataNames':
        [PyTango.DevVarStringArray,
         "list of administrator data names",
         []],
        'DefaultPreselectedComponents':
        [PyTango.DevVarStringArray,
         "list of default preselected components",
         []],
    }

    ##    Command definitions
    cmd_list = {
        'SetScanEnvVariables':
            [[PyTango.DevString, "environment data"],
             [PyTango.DevLong, "scanID"]],
        'ScanEnvVariables':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "environment data"]],
        'LoadProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'SaveProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'FetchProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'StoreProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'DeleteProfile':
            [[PyTango.DevString, "mntgrp name"],
             [PyTango.DevVoid, ""]],
        'ImportMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ImportEnvProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ExportEnvProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "configuration"]],
        'SwitchProfile':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "configuration"]],
        'MntGrpConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, " mntcrp configuration"]],
        'IsMntGrpUpdated':
            [[PyTango.DevVoid, ""],
             [PyTango.DevBoolean, "true if mntgrp changed"]],
        'PreselectComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ResetPreselectedComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'DeleteAllProfiles':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateConfigVariables':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'AvailableComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available component names"]],
        'AvailableProfiles':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available selection names"]],
        'AvailableMntGrps':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available mntgrp names"]],
        'AvailableDataSources':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available DataSource names"]],
        'AvailableTimers':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available timers"]],
        'MutedChannels':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of muted channels"]],
        'ComponentDescription':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString,
              "JSON component description"]],
        'VariableComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString,
              "JSON Dictionary with all Components for "
                 + "  configuration variable"]],
        'FullDeviceNames':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString,
              "JSON Dictionary with full device names for "
                 + " all aliases "]],
        'ComponentDataSources':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "profile component datasources"]],
        'SelectedDataSources':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "profile component datasources"]],
        'AdministratorDataNames':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "administrator data names"]],
        'PoolElementNames':
            [[PyTango.DevString, "pool list attribute name"],
             [PyTango.DevVarStringArray, "list of available pool elements"]],
        'MandatoryComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "component names"]],
        'SelectedComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "component names"]],
        'PreselectedComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "component names"]],
        'CreateDynamicComponent':
            [[PyTango.DevVarStringArray,
              "list of JSON strings with datasource parameters"],
             [PyTango.DevString, "name of dynamic Component"]],
        'DataSourceDescription':
            [[PyTango.DevVarStringArray, "list of required datasources"],
             [PyTango.DevVarStringArray,
              "list of JSON with description of CLIENT Datasources"]],
        'ComponentClientSources':
            [[PyTango.DevVarStringArray, "list of required components"],
             [PyTango.DevString,
              "JSON with description of CLIENT Datasources"]],
        'ChannelProperties':
            [[PyTango.DevString, "property type"],
             [PyTango.DevString,
              "JSON dictionary with channel properties {channel:property}"]],
        'SetChannelProperties':
            [[PyTango.DevVarStringArray,
              "a two element list with a property type and "
              "JSON value dictionary {channel:property}"],
             [PyTango.DevVoid, ""]],
        'CreateWriterConfiguration':
            [[PyTango.DevVarStringArray, "list of required components"],
             [PyTango.DevString,
              "XML Settinges"]],
        'RemoveDynamicComponent':
            [[PyTango.DevString, "name of dynamic Component"],
             [PyTango.DevVoid, ""]],
    }

    ##    Attribute definitions
    attr_list = {
        'Components':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Selected Components",
                 'description': "list of Selected Components",
            }],
        'StepDataSources':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "list of datasources to be switch into step mode",
                 'description': "list of datasources to be switched" +
                 " into step mode",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'DescriptionErrors':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Description Component Errors",
                 'description': "list of Description Component Errors",
            }],
        'Version':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ],
             {
                 'label': "Version",
                 'description': "server version",
            }],
        'MntGrp':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': " Measurement Group",
                 'description': " Measurement Group",
            }],
        'ScanDir':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Scan Directory",
                 'description': "Scan Directory",
            }],
        'ScanID':
            [[PyTango.DevLong,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Scan ID",
                 'description': "Scan ID",
            }],
        'ScanFile':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Scan File(s)",
                 'description': "Scan File(s)",
            }],
        'ConfigDevice':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Configuration Device",
                 'description': "Configuration device",
                 'Memorized': "true",
            }],
        'Door':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Door",
                 'description': "Door",
                 'Memorized': "true",
            }],
        'WriterDevice':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Writer Device",
                 'description': "Writer device",
            }],
        'UserData':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Client Data",
                 'description': "JSON dictionary with User Data",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'DeviceGroups':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Device groups",
                 'description': "JSON dictionary with device groups",
                 'Memorized': "true",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'DataSources':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Selected Datasources",
                 'description': "list of Selected Datasources",
            }],
        'ProfileConfiguration':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Profile Configuration",
                 'description': "JSON dict of server configuration",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'AppendEntry':
            [[PyTango.DevBoolean,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Append Entry",
                 'description': "flag for entry  appending ",
            }],
        'ConfigVariables':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Configuration Variables",
                'description': "JSON dictionary with configuration variables"
                 + "for templated components",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'ProfileFile':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Profile File with its Path",
                 'description': "config file with its full path",
                 'Memorized': "true",
            }],
    }

#------------------------------------------------------------------
##    Nxsrecselectorclass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name)
        print("In NXSRecSelectorClass constructor")

#==================================================================
#
#    NXSRecSelector class main method
#
#==================================================================
if __name__ == '__main__':
    pass
