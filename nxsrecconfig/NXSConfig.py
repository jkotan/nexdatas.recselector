#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        NXSRecSelector.py
#
# description : Python source for the NXSRecSelector and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                NXSRecSelector are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

""" Selector Server for NeXus Sardana Recorder """

import PyTango


#==================================================================
#   NXSRecSelector Class Description:
#
#         Tango Server for Nexus Sardana Recorder Settings
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :   Server is ON
#   DevState.RUNNING : Performing a query
#==================================================================


from .Settings import Settings as STG


## NXSRecSelector server interface
class NXSRecSelector(PyTango.Device_4Impl):

    #------------------------------------------------------------------
    #    Device constructor
    #------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.debug_stream("In __init__()")
        ## Recorder Settings
        self.__stg = STG(self)
        self.__toupdate = ['ConfigDevice', 'Door']

        NXSRecSelector.init_device(self)

    #------------------------------------------------------------------
    #    Device destructor
    #------------------------------------------------------------------
    def delete_device(self):
        self.debug_stream("In delete_device()")
        if hasattr(self, 'stg') and self.__stg:
            del self.__stg
            self.__stg = None
        self.set_state(PyTango.DevState.OFF)

    #------------------------------------------------------------------
    #    Device initialization
    #------------------------------------------------------------------
    def init_device(self):
        self.debug_stream("In init_device()")
        if hasattr(self, 'stg') and self.__stg:
            del self.__stg
            self.__stg = None
        self.__stg = STG(self)
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())

        self.__stg.poolBlacklist = self.PoolBlacklist \
            if self.PoolBlacklist else []
        self.__stg.timerFilterList = self.TimerFilterList \
            if self.TimerFilterList else ["*dgg*", "*/ctctrl0*"]
        self.__stg.defaultAutomaticComponents = \
            self.DefaultAutomaticComponents \
            if self.DefaultAutomaticComponents else []

    #------------------------------------------------------------------
    #    Always excuted hook method
    #------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")

#==================================================================
#
#    NXSRecSelector read/write attribute methods
#
#==================================================================
    #------------------------------------------------------------------
    #    Read Attribute Hardware
    #------------------------------------------------------------------
    def read_attr_hardware(self, _):
        self.debug_stream("In read_attr_hardware()")

    #------------------------------------------------------------------
    #    Read Components attribute
    #------------------------------------------------------------------
    def read_Components(self, attr):
        self.debug_stream("In read_Components()")
        attr.set_value(self.__stg.components)

    #------------------------------------------------------------------
    #    Read AutomaticComponents attribute
    #------------------------------------------------------------------
    def read_AutomaticComponents(self, attr):
        self.debug_stream("In read_AutomaticComponents()")
        attr.set_value(self.__stg.automaticComponents)

    #------------------------------------------------------------------
    #    Read DescriptionErrors attribute
    #------------------------------------------------------------------
    def read_DescriptionErrors(self, attr):
        self.debug_stream("In read_DescriptionErrors()")
        attr.set_value(self.__stg.descriptionErrors)

    #------------------------------------------------------------------
    #    Read Door attribute
    #------------------------------------------------------------------
    def read_Door(self, attr):
        self.debug_stream("In read_Door()")
        attr.set_value(self.__stg.door)

    #------------------------------------------------------------------
    #    Write Door attribute
    #------------------------------------------------------------------
    def write_Door(self, attr):
        self.debug_stream("In write_Door()")
        self.__stg.door = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read STEPDataSources attribute
    #------------------------------------------------------------------
    def read_STEPDataSources(self, attr):
        self.debug_stream("In read_STEPDataSources()")
        # workaround for PyTango #709
        attr.set_value(self.__stg.stepdatasources or [])

    #------------------------------------------------------------------
    #    Write STEPDataSources attribute
    #------------------------------------------------------------------
    def write_STEPDataSources(self, attr):
        self.debug_stream("In write_STEPDataSources()")
        if self.is_STEPDataSources_write_allowed():
            # workaround for PyTango #709
            self.__stg.stepdatasources = attr.get_write_value() or []
        else:
            self.warn_stream("To change the settings please close the server.")
            raise Exception(
                "To change the settings please close the server.")

    #---- STEPDataSources attribute Write State Machine -----------------
    def is_STEPDataSources_write_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    Read ConfigDevice attribute
    #------------------------------------------------------------------
    def read_ConfigDevice(self, attr):
        self.debug_stream("In read_ConfigDevice()")
        attr.set_value(self.__stg.configDevice)

    #------------------------------------------------------------------
    #    Write ConfigDevice attribute
    #------------------------------------------------------------------
    def write_ConfigDevice(self, attr):
        self.debug_stream("In write_ConfigDevice()")
        self.__stg.configDevice = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read MntGrp attribute
    #------------------------------------------------------------------
    def read_MntGrp(self, attr):
        self.debug_stream("In read_MntGrp()")
        attr.set_value(self.__stg.mntGrp)

    #------------------------------------------------------------------
    #    Write MntGrp attribute
    #------------------------------------------------------------------
    def write_MntGrp(self, attr):
        self.debug_stream("In write_MntGrp()")
        self.__stg.mntGrp = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ScanDir attribute
    #------------------------------------------------------------------
    def read_ScanDir(self, attr):
        self.debug_stream("In read_ScanDir()")
        attr.set_value(self.__stg.scanDir)

    #------------------------------------------------------------------
    #    Write ScanDir attribute
    #------------------------------------------------------------------
    def write_ScanDir(self, attr):
        self.debug_stream("In write_ScanDir()")
        self.__stg.scanDir = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ScanFile attribute
    #------------------------------------------------------------------
    def read_ScanFile(self, attr):
        self.debug_stream("In read_ScanFile()")
        # workaround for PyTango #709
        attr.set_value(self.__stg.scanFile or [])

    #------------------------------------------------------------------
    #    Write ScanFile attribute
    #------------------------------------------------------------------
    def write_ScanFile(self, attr):
        self.debug_stream("In write_ScanFile()")
        # workaround for PyTango #709
        self.__stg.scanFile = attr.get_write_value() or []

    #------------------------------------------------------------------
    #    Read ScanID attribute
    #------------------------------------------------------------------
    def read_ScanID(self, attr):
        self.debug_stream("In read_ScanID()")
        attr.set_value(self.__stg.scanID)

    #------------------------------------------------------------------
    #    Write ScanID attribute
    #------------------------------------------------------------------
    def write_ScanID(self, attr):
        self.debug_stream("In write_ScanID()")
        self.__stg.scanID = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read WriterDevice attribute
    #------------------------------------------------------------------
    def read_WriterDevice(self, attr):
        self.debug_stream("In read_WriterDevice()")
        attr.set_value(self.__stg.writerDevice)

    #------------------------------------------------------------------
    #    Write WriterDevice attribute
    #------------------------------------------------------------------
    def write_WriterDevice(self, attr):
        self.debug_stream("In write_WriterDevice()")
        self.__stg.writerDevice = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read DeviceGroups attribute
    #------------------------------------------------------------------
    def read_DeviceGroups(self, attr):
        self.debug_stream("In read_DeviceGroups()")
        attr.set_value(self.__stg.deviceGroups)

    #------------------------------------------------------------------
    #    Write DeviceGroups attribute
    #------------------------------------------------------------------
    def write_DeviceGroups(self, attr):
        self.debug_stream("In write_DeviceGroups()")
        self.__stg.deviceGroups = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read AdminData attribute
    #------------------------------------------------------------------
    def read_AdminData(self, attr):
        self.debug_stream("In read_AdminData()")
        attr.set_value(self.__stg.adminData)

    #------------------------------------------------------------------
    #    Write AdminData attribute
    #------------------------------------------------------------------
    def write_AdminData(self, attr):
        self.debug_stream("In write_AdminData()")
        self.__stg.adminData = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read DataRecord attribute
    #------------------------------------------------------------------
    def read_DataRecord(self, attr):
        self.debug_stream("In read_DataRecord()")
        attr.set_value(self.__stg.dataRecord)

    #------------------------------------------------------------------
    #    Write DataRecord attribute
    #------------------------------------------------------------------
    def write_DataRecord(self, attr):
        self.debug_stream("In write_DataRecord()")
        self.__stg.dataRecord = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read LabelTypes attribute
    #------------------------------------------------------------------
    def read_LabelTypes(self, attr):
        self.debug_stream("In read_LabelTypes()")
        attr.set_value(self.__stg.labelTypes)

    #------------------------------------------------------------------
    #    Write LabelTypes attribute
    #------------------------------------------------------------------
    def write_LabelTypes(self, attr):
        self.debug_stream("In write_LabelTypes()")
        self.__stg.labelTypes = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read LabelShapes attribute
    #------------------------------------------------------------------
    def read_LabelShapes(self, attr):
        self.debug_stream("In read_LabelShapes()")
        attr.set_value(self.__stg.labelShapes)

    #------------------------------------------------------------------
    #    Write LabelShapes attribute
    #------------------------------------------------------------------
    def write_LabelShapes(self, attr):
        self.debug_stream("In write_LabelShapes()")
        self.__stg.labelShapes = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read DataSources attribute
    #------------------------------------------------------------------
    def read_DataSources(self, attr):
        self.debug_stream("In read_DataSources()")
        attr.set_value(self.__stg.dataSources)

    #------------------------------------------------------------------
    #    Read AvailableTimers attribute
    #------------------------------------------------------------------
    def read_AvailableTimers(self, attr):
        self.debug_stream("In read_AvailableTimers()")
        attr.set_value(self.__stg.availableTimers)

    #------------------------------------------------------------------
    #    Read Description attribute
    #------------------------------------------------------------------
    def read_Description(self, attr):
        self.debug_stream("In read_Description()")
        attr.set_value(self.__stg.description)

    #------------------------------------------------------------------
    #    Read VariableComponents attribute
    #------------------------------------------------------------------
    def read_VariableComponents(self, attr):
        self.debug_stream("In read_VariableComponents()")
        attr.set_value(self.__stg.variableComponents)

    #------------------------------------------------------------------
    #    Read FullDeviceNames attribute
    #------------------------------------------------------------------
    def read_FullDeviceNames(self, attr):
        self.debug_stream("In read_FullDeviceNames()")
        attr.set_value(self.__stg.fullDeviceNames)

    #------------------------------------------------------------------
    #    Read Configuration attribute
    #------------------------------------------------------------------
    def read_Configuration(self, attr):
        self.debug_stream("In read_DataSources()")
        attr.set_value(self.__stg.configuration)

    #------------------------------------------------------------------
    #    Write Configuration attribute
    #------------------------------------------------------------------
    def write_Configuration(self, attr):
        self.debug_stream("In write_Configuration()")
        self.__stg.configuration = attr.get_write_value()
        try:
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #------------------------------------------------------------------
    #    Read DisableDataSources attribute
    #------------------------------------------------------------------
    def read_DisableDataSources(self, attr):
        self.debug_stream("In read_DisableDataSources()")
        attr.set_value(self.__stg.disableDataSources)

    #------------------------------------------------------------------
    #    Read AppendEntry attribute
    #------------------------------------------------------------------
    def read_AppendEntry(self, attr):
        self.debug_stream("In read_AppendEntry()")
        attr.set_value(self.__stg.appendEntry)

    #------------------------------------------------------------------
    #    Write AppendEntry attribute
    #------------------------------------------------------------------
    def write_AppendEntry(self, attr):
        self.debug_stream("In write_AppendEntry()")
        self.__stg.appendEntry = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ConfigVariables attribute
    #------------------------------------------------------------------
    def read_ConfigVariables(self, attr):
        self.debug_stream("In read_ConfigVariables()")
        attr.set_value(self.__stg.configVariables)

    #------------------------------------------------------------------
    #    Write ConfigVariables attribute
    #------------------------------------------------------------------
    def write_ConfigVariables(self, attr):
        self.debug_stream("In write_ConfigVariables()")
        self.__stg.configVariables = attr.get_write_value()

    #------------------------------------------------------------------
    #    Read ConfigFile attribute
    #------------------------------------------------------------------
    def read_ConfigFile(self, attr):
        self.debug_stream("In read_ConfigFile()")
        attr.set_value(self.__stg.configFile)

    #------------------------------------------------------------------
    #    Write ConfigFile attribute
    #------------------------------------------------------------------
    def write_ConfigFile(self, attr):
        self.debug_stream("In write_ConfigFile()")
        self.__stg.configFile = attr.get_write_value()

    #==================================================================
    #
    #    NXSRecSelector command methods
    #
    #==================================================================

    #------------------------------------------------------------------
    #    LoadConfiguration command:
    #
    #    Description: Load server configuration
    #
    #------------------------------------------------------------------
    def LoadConfiguration(self):
        self.debug_stream("In LoadConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.loadConfiguration()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- LoadConfiguration command State Machine -----------------
    def is_LoadConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    FetchConfiguration command:
    #
    #    Description: Fetch server configuration
    #
    #------------------------------------------------------------------
    def FetchConfiguration(self):
        self.debug_stream("In FetchConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.fetchConfiguration()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- FetchConfiguration command State Machine -----------------
    def is_FetchConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SaveConfiguration command:
    #
    #    Description: Save server configuration
    #
    #------------------------------------------------------------------
    def SaveConfiguration(self):
        self.debug_stream("In SaveConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.saveConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- SaveConfiguration command State Machine -----------------
    def is_SaveConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    StoreConfiguration command:
    #
    #    Description: Store server configuration
    #
    #------------------------------------------------------------------
    def StoreConfiguration(self):
        self.debug_stream("In StoreConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.storeConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- StoreConfiguration command State Machine -----------------
    def is_StoreConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    UpdateControllers:
    #
    #    Description: checks existing controllers of pools for
    #        AutomaticDataSources
    #
    #------------------------------------------------------------------
    def UpdateControllers(self):
        self.debug_stream("In UpdateControllers()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.updateControllers()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- UpdateControllers command State Machine -----------------
    def is_UpdateControllers_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ResetAutomaticComponents:
    #
    #    Description: reset AutomaticComponentGroup
    #        to DefaultAutomaticComponents
    #
    #------------------------------------------------------------------
    def ResetAutomaticComponents(self):
        self.debug_stream("In ResetAutomaticComponents()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.resetAutomaticComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ResetAutomaticComponents command State Machine -----------------
    def is_ResetAutomaticComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ClearAllSelections:
    #
    #    Description: reset AutomaticComponentGroup
    #        to DefaultAutomaticComponents
    #
    #------------------------------------------------------------------
    def ClearAllSelections(self):
        self.debug_stream("In ClearAllSelections()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.clearAllSelections()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ClearAllSelections command State Machine -----------------
    def is_ClearAllSelections_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    UpdateConfigVariables:
    #
    #    Description: sends ConfigVariables into ConfigServer
    #        and updates serialno if appendEntry selected
    #
    #------------------------------------------------------------------
    def UpdateConfigVariables(self):
        self.debug_stream("In UpdateConfigVariables()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.updateConfigVariables()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- UpdateConfigVariables command State Machine -----------------
    def is_UpdateConfigVariables_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    IsMntGrpChanged:
    #
    #    Description:  returns true if mntgrp was changed
    #
    #------------------------------------------------------------------
    def IsMntGrpChanged(self):
        self.debug_stream("In IsMntGrpChanged()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = bool(self.__stg.isMntGrpChanged())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- IsMntGrpChanged command State Machine -----------------
    def is_IsMntGrpChanged_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    MntGrpConfiguration:
    #
    #    Description:  returns mntgrp configuration
    #
    #------------------------------------------------------------------
    def MntGrpConfiguration(self):
        self.debug_stream("In MntGrpConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.mntGrpConfiguration())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- MntGrpConfiguration command State Machine -----------------
    def is_MntGrpConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    UpdateMntGrp:
    #
    #    Description: updates mntgrp configuration
    #
    #
    #------------------------------------------------------------------
    def UpdateMntGrp(self):
        self.debug_stream("In UpdateMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.updateMntGrp())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- UpdateMntGrp command State Machine -----------------
    def is_UpdateMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    SwitchMntGrp:
    #
    #    Description: switchs mntgrp configuration
    #
    #
    #------------------------------------------------------------------
    def SwitchMntGrp(self):
        self.debug_stream("In SwitchMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.switchMntGrp())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

    #---- SwitchMntGrp command State Machine -----------------
    def is_SwitchMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ImportMntGrp:
    #
    #    Description: imports active mntgrp configuration
    #
    #
    #------------------------------------------------------------------
    def ImportMntGrp(self):
        self.debug_stream("In ImportMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.importMntGrp()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ImportMntGrp command State Machine -----------------
    def is_ImportMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ImportAllEnv:
    #
    #    Description: imports all environment variables
    #
    #
    #------------------------------------------------------------------
    def ImportAllEnv(self):
        self.debug_stream("In ImportAllEnv()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.importAllEnv()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__toupdate:
                if var in self.__stg.names():
                    if hasattr(dp, var):
                        dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ImportMntGrp command State Machine -----------------
    def is_ImportEnv_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ExportAllEnv:
    #
    #    Description: exports all environment variables
    #
    #
    #------------------------------------------------------------------
    def ExportAllEnv(self):
        self.debug_stream("In ExportAllEnv()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.exportAllEnv()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

    #---- ExportMntGrp command State Machine -----------------
    def is_ExportEnv_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    FindMntGrp command:
    #
    #    Description: Returns a full name of the given measurement group
    #
    #    argout: DevString    mntgrp alias
    #    argout: DevString    mntgrp full name
    #------------------------------------------------------------------
    def FindMntGrp(self, argin):
        self.debug_stream("In FindMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.__stg.findMntGrp(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableComponents command State Machine -----------------
    def is_FindMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    StoreEnvData command:
    #
    #    Description: Stores ScanDir, ScanFile and NeXusSelectorDevice
    #                 in environment variables
    #
    #    argout: DevString    json dictionary with enviroutment data
    #    argout: DevLong    scan ID
    #------------------------------------------------------------------
    def StoreEnvData(self, argin):
        self.debug_stream("In StoreEnvData()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = int(self.__stg.storeEnvData(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- StoreEnvData command State Machine -----------------
    def is_StoreEnvData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    FetchEnvData command:
    #
    #    Description: Fetches ScanDir, ScanFile, ScanID and
    #                 NeXusSelectorDevice
    #                 in environment variables
    #
    #    argout: DevString    json dictionary with enviroutment data
    #------------------------------------------------------------------
    def FetchEnvData(self):
        self.debug_stream("In FetchEnvData()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.__stg.fetchEnvData())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- FetchEnvData command State Machine -----------------
    def is_FetchEnvData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableComponents command:
    #
    #    Description: Returns a list of available component names
    #
    #    argout: DevVarStringArray    list of available component names
    #------------------------------------------------------------------
    def AvailableComponents(self):
        self.debug_stream("In AvailableComponents()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableComponents command State Machine -----------------
    def is_AvailableComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableSelections command:
    #
    #    Description: Returns a list of available selection names
    #
    #    argout: DevVarStringArray    list of available selection names
    #------------------------------------------------------------------
    def AvailableSelections(self):
        self.debug_stream("In AvailableSelections()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableSelections()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableSelections command State Machine -----------------
    def is_AvailableSelections_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableMeasurementGroups command:
    #
    #    Description: Returns a list of available mntgrp names
    #
    #    argout: DevVarStringArray    list of available mntgrp names
    #------------------------------------------------------------------
    def AvailableMeasurementGroups(self):
        self.debug_stream("In AvailableMeasurementGroups()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableMeasurementGroups()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableMeasurementGroups command State Machine -----------------
    def is_AvailableMeasurementGroups_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    AvailableDataSources command:
    #
    #    Description: Returns a list of available DataSource names
    #
    #    argout: DevVarStringArray    list of available DataSource names
    #------------------------------------------------------------------
    def AvailableDataSources(self):
        self.debug_stream("In AvailableDataSources()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- AvailableDataSources command State Machine -----------------
    def is_AvailableDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    PoolChannels command:
    #
    #    Description: Returns a list of available pool channels
    #
    #    argout: DevVarStringArray    list of available pool channels
    #------------------------------------------------------------------
    def PoolChannels(self):
        self.debug_stream("In PoolChannels()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.poolChannels()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- PoolChannels command State Machine -----------------
    def is_PoolChannels_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    PoolMotors command:
    #
    #    Description: Returns a list of available pool channels
    #
    #    argout: DevVarStringArray    list of available pool channels
    #------------------------------------------------------------------
    def PoolMotors(self):
        self.debug_stream("In PoolMotors()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.poolMotors()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

    #---- PoolMotors command State Machine -----------------
    def is_PoolMotors_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    MandatoryComponents command:
    #
    #    Description: Sets the mandatory components
    #
    #    argout: DevVarStringArray    component names
    #------------------------------------------------------------------
    def MandatoryComponents(self):
        self.debug_stream("In MandatoryComponents()")

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.mandatoryComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

    #---- MandatoryComponents command State Machine -----------------
    def is_MandatoryComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    CreateDynamicComponent command:
    #
    #    Description: create dynamic component
    #
    #    argin:  DevVarStringArray    list of datasource parameters
    #    argout: DevVarString         name of created dynamic component
    #------------------------------------------------------------------
    def CreateDynamicComponent(self, argin):
        self.debug_stream("In CreateDynamicComponent()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.createDynamicComponent(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

    #---- CreateDynamicComponent command State Machine -----------------
    def is_CreateDynamicComponent_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

    #------------------------------------------------------------------
    #    RemoveDynamicComponent command:
    #
    #    Description: Deletes the given dynamic component
    #
    #    argin:  DevString  dynamic component name
    #------------------------------------------------------------------
    def RemoveDynamicComponent(self, argin):
        self.debug_stream("In RemoveDynamicComponent()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.removeDynamicComponent(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

    #---- RemoveDynamicComponent command State Machine -----------------
    def is_RemoveDynamicComponent_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    DeleteMntGrp command:
    #
    #    Description: Deletes the given mntgrp
    #
    #    argin:  DevString  measurement group name
    #------------------------------------------------------------------
    def DeleteMntGrp(self, argin):
        self.debug_stream("In DeleteMntGrp()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.deleteMntGrp(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

    #---- DeleteMntGrp command State Machine -----------------
    def is_DeleteMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    ClientSources command:
    #
    #    Description: describes client datasources from components
    #
    #    argin:  DevVarStringArray    list of component names
    #    argout: DevVarString         description of component datasources
    #------------------------------------------------------------------
    def ClientSources(self, argin):
        self.debug_stream("In ClientSources()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.clientSources(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

    #---- ClientSources command State Machine -----------------
    def is_ClientSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

    #------------------------------------------------------------------
    #    GetSourceDescription command:
    #
    #    Description: descrive datasources
    #
    #    argin:  DevVarStringArray    list of datasource names
    #    argout: DevVarStringArray    description of datasources
    #------------------------------------------------------------------
    def GetSourceDescription(self, argin):
        self.debug_stream("In GetSourceDescription()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.getSourceDescription(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

    #---- GetSourceDescription command State Machine -----------------
    def is_GetSourceDescription_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

    #------------------------------------------------------------------
    #    CreateConfiguration command:
    #
    #    Description: create configuration from the given components
    #
    #    argin:  DevVarStringArray    list of component names
    #    argout: DevVarString         XML configuration string
    #------------------------------------------------------------------
    def CreateConfiguration(self, argin):
        self.debug_stream("In CreateConfiguration()")
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.createConfiguration(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

    #---- CreateConfiguration command State Machine -----------------
    def is_CreateConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#==================================================================
#
##    NXSRecSelectorClass class definition
#
#==================================================================
class NXSRecSelectorClass(PyTango.DeviceClass):

    ##    Class Properties
    class_property_list = {
    }

    ##    Device Properties
    device_property_list = {
        'PoolBlacklist':
        [PyTango.DevVarStringArray,
         "blacklist of pools",
         []],
        'TimerFilterList':
        [PyTango.DevVarStringArray,
         "list of timer filters",
         []],
        'DefaultAutomaticComponents':
        [PyTango.DevVarStringArray,
         "list of default automatic components",
         []],
    }

    ##    Command definitions
    cmd_list = {
        'FindMntGrp':
            [[PyTango.DevString, "mntgrp alias"],
             [PyTango.DevString, "mntgrp fullname"]],
        'StoreEnvData':
            [[PyTango.DevString, "environment data"],
             [PyTango.DevLong, "scanID"]],
        'FetchEnvData':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "environment data"]],
        'LoadConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'SaveConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'FetchConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'StoreConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'DeleteMntGrp':
            [[PyTango.DevString, "mntgrp name"],
             [PyTango.DevVoid, ""]],
        'ImportMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ImportAllEnv':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ExportAllEnv':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "configuration"]],
        'SwitchMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "configuration"]],
        'MntGrpConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, " mntcrp configuration"]],
        'IsMntGrpChanged':
            [[PyTango.DevVoid, ""],
             [PyTango.DevBoolean, "true if mntgrp changed"]],
        'UpdateControllers':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ResetAutomaticComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ClearAllSelections':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateConfigVariables':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'AvailableComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available component names"]],
        'AvailableSelections':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available selection names"]],
        'AvailableMeasurementGroups':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available mntgrp names"]],
        'AvailableDataSources':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available DataSource names"]],
        'PoolChannels':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available pool channels"]],
        'PoolMotors':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available pool motors"]],
        'MandatoryComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "component names"]],
        'CreateDynamicComponent':
            [[PyTango.DevVarStringArray,
              "list of JSON strings with datasource parameters"],
             [PyTango.DevString, "name of dynamic Component"]],
        'GetSourceDescription':
            [[PyTango.DevVarStringArray, "list of required datasources"],
             [PyTango.DevVarStringArray,
              "list of JSON with description of CLIENT Datasources"]],
        'ClientSources':
            [[PyTango.DevVarStringArray, "list of required components"],
             [PyTango.DevString,
              "JSON with description of CLIENT Datasources"]],
        'CreateConfiguration':
            [[PyTango.DevVarStringArray, "list of required components"],
             [PyTango.DevString,
              "XML Settinges"]],
        'RemoveDynamicComponent':
            [[PyTango.DevString, "name of dynamic Component"],
             [PyTango.DevVoid, ""]],
    }

    ##    Attribute definitions
    attr_list = {
        'Components':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Selected Components",
                 'description': "list of Selected Components",
            }],
        'STEPDataSources':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ_WRITE, 10000],
             {
                 'label': "list of datasources to be switch into step mode",
                 'description': "list of datasources to be switched" +
                 " into step mode",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'AutomaticComponents':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Automatic Components",
                 'description': "list of automatic components",
            }],
        'DescriptionErrors':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Description Component Errors",
                 'description': "list of Description Component Errors",
            }],
        'MntGrp':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': " Measurement Group",
                 'description': " Measurement Group",
            }],
        'ScanDir':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Scan Directory",
                 'description': "Scan Directory",
            }],
        'ScanID':
            [[PyTango.DevLong,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Scan ID",
                 'description': "Scan ID",
            }],
        'ScanFile':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ_WRITE, 50],
             {
                 'label': "Scan File(s)",
                 'description': "Scan File(s)",
            }],
        'ConfigDevice':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Configuration Device",
                 'description': "Configuration device",
                 'Memorized': "true",
            }],
        'Door':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Door",
                 'description': "Door",
                 'Memorized': "true",
            }],
        'WriterDevice':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Writer Device",
                 'description': "Writer device",
            }],
        'DataRecord':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Client Data Record",
                 'description': "JSON dictionary with Client Data Record",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'DeviceGroups':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Device groups",
                 'description': "JSON dictionary with device groups",
                 'Memorized': "true",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'AdminData':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Adminitrator Data",
                 'description': "JSON list with administrator data names",
                 'Memorized': "true",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'LabelTypes':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "NeXus Types for DataSource Labels",
                'description': "JSON dictionary with NeXus Types for "
                 + "Datasource Labels",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'LabelShapes':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "NeXus Shapes for DataSource Labels",
                 'description': "JSON dictionary with NeXus Shapes for "
                 + "Datasource Labels",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'DataSources':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Selected Datasources",
                 'description': "list of Selected Datasources",
            }],
        'AvailableTimers':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Available Timers",
                 'description': "list of Available Timers",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'Description':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ],
             {
                 'label': "Dependences descrition",
                 'description': "Dependences descrition of Components and "
                 + "Datasources",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'VariableComponents':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ],
             {
                 'label': " Variable Components",
                 'description': "JSON Dictionary with Variables for "
                 + " all  available Components ",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'FullDeviceNames':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ],
             {
                 'label': " Full device names",
                 'description': "JSON Dictionary with full device names for "
                 + " all aliases ",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'Configuration':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "configuration",
                 'description': "JSON dict of server configuration",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'DisableDataSources':
            [[PyTango.DevString,
              PyTango.SPECTRUM,
              PyTango.READ, 10000],
             {
                 'label': "Disable DataSources",
                 'description': "list of Disable DataSources",
            }],
        'AppendEntry':
            [[PyTango.DevBoolean,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Append Entry",
                 'description': "flag for entry  appending ",
            }],
        'ConfigVariables':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Configuration Variables",
                'description': "JSON dictionary with configuration variables"
                 + "for templated components",
                 'Display level': PyTango.DispLevel.EXPERT,
            }],
        'ConfigFile':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'label': "Config File with its Path",
                 'description': "config file with its full path",
                 'Memorized': "true",
            }],
    }

#------------------------------------------------------------------
##    Nxsrecselectorclass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name)
        print("In NXSRecSelectorClass constructor")

#==================================================================
#
#    NXSRecSelector class main method
#
#==================================================================
if __name__ == '__main__':
    pass
