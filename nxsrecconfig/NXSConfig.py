#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        NXSRecSelector.py
#
# description : Python source for the NXSRecSelector and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                NXSRecSelector are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

""" Selector Server for NeXus Sardana Recorder """

import PyTango


#==================================================================
#   NXSRecSelector Class Description:
#
#         Tango Server for Nexus Sardana Recorder Settings
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :   Server is ON
#   DevState.RUNNING : Performing a query
#==================================================================


from .Settings import Settings as STG

class NXSRecSelector(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        ## Recorder Settings
        self.stg = STG(self)
        NXSRecSelector.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print >> self.log_info, "[Device delete_device method] for device", \
            self.get_name()
        if hasattr(self, 'stg') and  self.stg :
            del self.stg
            self.stg = None
        self.set_state(PyTango.DevState.OFF)

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print >> self.log_info, "In ", self.get_name(), "::init_device()"
        if hasattr(self, 'stg') and  self.stg :
            del self.stg
            self.stg = None
        self.stg = STG(self)
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        
        self.stg.poolBlacklist = self.PoolBlacklist \
            if self.PoolBlacklist else []

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::always_excuted_hook()"

#==================================================================
#
#    NXSRecSelector read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, _):
        print >> self.log_info, "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read Components attribute
#------------------------------------------------------------------
    def read_Components(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Components()"
        attr.set_value(self.stg.components())


#------------------------------------------------------------------
#    Read Timer attribute
#------------------------------------------------------------------
    def read_Timer(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Timer()"
        attr.set_value(self.stg.state["Timer"])


#------------------------------------------------------------------
#    Write Timer attribute
#------------------------------------------------------------------
    def write_Timer(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Timer()"
        self.stg.state["Timer"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.state["Timer"]




#------------------------------------------------------------------
#    Read ComponentGroup attribute
#------------------------------------------------------------------
    def read_ComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ComponentGroup()"
        attr.set_value(self.stg.componentGroup)


#------------------------------------------------------------------
#    Write ComponentGroup attribute
#------------------------------------------------------------------
    def write_ComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ComponentGroup()"
        self.stg.componentGroup = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["ComponentGroup"]



#------------------------------------------------------------------
#    Read AutomaticComponentGroup attribute
#------------------------------------------------------------------
    def read_AutomaticComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponentGroup()"
        attr.set_value(self.stg.automaticComponentGroup)


#------------------------------------------------------------------
#    Write AutomaticComponentGroup attribute
#------------------------------------------------------------------
    def write_AutomaticComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_AutomaticComponentGroup()"
        self.stg.automaticComponentGroup = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["AutomaticComponentGroup"]


#------------------------------------------------------------------
#    Read AutomaticComponents attribute
#------------------------------------------------------------------
    def read_AutomaticComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponents()"
        attr.set_value(self.stg.automaticComponents())


#------------------------------------------------------------------
#    Read OptionalComponents attribute
#------------------------------------------------------------------
    def read_OptionalComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_OptionalComponents()"
        attr.set_value(self.stg.optionalComponents)


#------------------------------------------------------------------
#    Write OptionalComponents attribute
#------------------------------------------------------------------
    def write_OptionalComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_OptionalComponents()"
        self.stg.optionalComponents = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["OptionalComponents"]



#------------------------------------------------------------------
#    Read MacroServer attribute
#------------------------------------------------------------------
    def read_MacroServer(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_MacroServer()"
        attr.set_value(self.stg.macroServer)


#------------------------------------------------------------------
#    Write MacroServer attribute
#------------------------------------------------------------------
    def write_MacroServer(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_MacroServer()"
        self.stg.macroServer = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.macroServer



#------------------------------------------------------------------
#    Read ConfigDevice attribute
#------------------------------------------------------------------
    def read_ConfigDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ConfigDevice()"
        attr.set_value(self.stg.configDevice)


#------------------------------------------------------------------
#    Write ConfigDevice attribute
#------------------------------------------------------------------
    def write_ConfigDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ConfigDevice()"
        self.stg.configDevice = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.configDevice



#------------------------------------------------------------------
#    Read ActiveMntGrp attribute
#------------------------------------------------------------------
    def read_ActiveMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ActiveMntGrp()"
        attr.set_value(self.stg.activeMntGrp)


#------------------------------------------------------------------
#    Write ActiveMntGrp attribute
#------------------------------------------------------------------
    def write_ActiveMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ActiveMntGrp()"
        self.stg.activeMntGrp = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.activeMntGrp

#------------------------------------------------------------------
#    Read ScanDir attribute
#------------------------------------------------------------------
    def read_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanDir()"
        attr.set_value(self.stg.scanDir)


#------------------------------------------------------------------
#    Write ScanDir attribute
#------------------------------------------------------------------
    def write_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanDir()"
        self.stg.scanDir = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.scanDir

#------------------------------------------------------------------
#    Read ScanFile attribute
#------------------------------------------------------------------
    def read_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanFile()"
        attr.set_value(self.stg.scanFile)


#------------------------------------------------------------------
#    Write ScanFile attribute
#------------------------------------------------------------------
    def write_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanFile()"
        self.stg.scanFile = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.scanFile

#------------------------------------------------------------------
#    Read ScanID attribute
#------------------------------------------------------------------
    def read_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanID()"
        attr.set_value(self.stg.scanID)


#------------------------------------------------------------------
#    Write ScanID attribute
#------------------------------------------------------------------
    def write_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanID()"
        self.stg.scanID = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.scanID



#------------------------------------------------------------------
#    Read WriterDevice attribute
#------------------------------------------------------------------
    def read_WriterDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_WriterDevice()"
        attr.set_value(self.stg.writerDevice)


#------------------------------------------------------------------
#    Write WriterDevice attribute
#------------------------------------------------------------------
    def write_WriterDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_WriterDevice()"
        self.stg.writerDevice = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.writerDevice

#------------------------------------------------------------------
#    Read DataRecord attribute
#------------------------------------------------------------------
    def read_DataRecord(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataRecord()"
        attr.set_value(self.stg.state["DataRecord"])


#------------------------------------------------------------------
#    Write DataRecord attribute
#------------------------------------------------------------------
    def write_DataRecord(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DataRecord()"
        self.stg.state["DataRecord"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["DataRecord"]



#------------------------------------------------------------------
#    Read LabelPaths attribute
#------------------------------------------------------------------
    def read_LabelPaths(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelPaths()"
        attr.set_value(self.stg.labelPaths)


#------------------------------------------------------------------
#    Write LabelPaths attribute
#------------------------------------------------------------------
    def write_LabelPaths(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_LabelPaths()"
        self.stg.labelPaths = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["LabelPaths"]




#------------------------------------------------------------------
#    Read LabelTypes attribute
#------------------------------------------------------------------
    def read_LabelTypes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelTypes()"
        attr.set_value(self.stg.labelTypes)


#------------------------------------------------------------------
#    Write LabelTypes attribute
#------------------------------------------------------------------
    def write_LabelTypes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_LabelTypes()"
        self.stg.labelTypes = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["LabelTypes"]



#------------------------------------------------------------------
#    Read LabelShapes attribute
#------------------------------------------------------------------
    def read_LabelShapes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelShapes()"
        attr.set_value(self.stg.labelShapes)


#------------------------------------------------------------------
#    Write LabelShapes attribute
#------------------------------------------------------------------
    def write_LabelShapes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_LabelShapes()"
        self.stg.labelShapes = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["LabelShapes"]


#------------------------------------------------------------------
#    Read LabelLinks attribute
#------------------------------------------------------------------
    def read_LabelLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelLinks()"
        attr.set_value(self.stg.labelLinks)


#------------------------------------------------------------------
#    Write LabelLinks attribute
#------------------------------------------------------------------
    def write_LabelLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_LabelLinks()"
        self.stg.labelLinks = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["LabelLinks"]




#------------------------------------------------------------------
#    Read DataSourceLabels attribute
#------------------------------------------------------------------
    def read_DataSourceLabels(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DataSourceLabels()"
        attr.set_value(self.stg.dataSourceLabels)


#------------------------------------------------------------------
#    Write DataSourceLabels attribute
#------------------------------------------------------------------
    def write_DataSourceLabels(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_DataSourceLabels()"
        self.stg.dataSourceLabels = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["DataSourceLabels"]


#------------------------------------------------------------------
#    Read DataSources attribute
#------------------------------------------------------------------
    def read_DataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataSources()"
        attr.set_value(self.stg.dataSources())


#    Read AvailableTimers attribute
#------------------------------------------------------------------
    def read_AvailableTimers(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AvailableTimers()"
        attr.set_value(self.stg.availableTimers())


#------------------------------------------------------------------
#    Read Description attribute
#------------------------------------------------------------------
    def read_Description(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Description()"
        attr.set_value(self.stg.description())


#------------------------------------------------------------------
#    Read DataSourceGroup attribute
#------------------------------------------------------------------
    def read_DataSourceGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataSources()"
        attr.set_value(self.stg.dataSourceGroup)


#------------------------------------------------------------------
#    Write DataSourceGroup attribute
#------------------------------------------------------------------
    def write_DataSourceGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_DataSourceGroup()"
        self.stg.dataSourceGroup = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["DataSourceGroup"]

#------------------------------------------------------------------
#    Read AutomaticDataSources attribute
#------------------------------------------------------------------
    def read_AutomaticDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticDataSources()"
        attr.set_value(self.stg.automaticDataSources)



#------------------------------------------------------------------
#    Write AutomaticDataSources attribute
#------------------------------------------------------------------
    def write_AutomaticDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_AutomaticDataSources()"
        self.stg.automaticDataSources = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["AutomaticDataSources"]



#------------------------------------------------------------------
#    Read DisableDataSources attribute
#------------------------------------------------------------------
    def read_DisableDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DisableDataSources()"
        attr.set_value(self.stg.disableDataSources())




#------------------------------------------------------------------
#    Read AppendEntry attribute
#------------------------------------------------------------------
    def read_AppendEntry(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_AppendEntry()"
        attr.set_value(self.stg.state["AppendEntry"])


#------------------------------------------------------------------
#    Write AppendEntry attribute
#------------------------------------------------------------------
    def write_AppendEntry(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_AppendEntry()"
        self.stg.state["AppendEntry"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["AppendEntry"]
        

#------------------------------------------------------------------
#    Read ComponentsFromMntGrp attribute
#------------------------------------------------------------------
    def read_ComponentsFromMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ComponentsFromMntGrp()"
        attr.set_value(self.stg.state["ComponentsFromMntGrp"])


#------------------------------------------------------------------
#    Write ComponentsFromMntGrp attribute
#------------------------------------------------------------------
    def write_ComponentsFromMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ComponentsFromMntGrp()"
        self.stg.state["ComponentsFromMntGrp"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["ComponentsFromMntGrp"]


#------------------------------------------------------------------
#    Read DynamicComponents attribute
#------------------------------------------------------------------
    def read_DynamicComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DynamicComponents()"
        attr.set_value(self.stg.state["DynamicComponents"])


#------------------------------------------------------------------
#    Write DynamicComponents attribute
#------------------------------------------------------------------
    def write_DynamicComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_DynamicComponents()"
        self.stg.state["DynamicComponents"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["DynamicComponents"]


#------------------------------------------------------------------
#    Read DynamicLinks attribute
#------------------------------------------------------------------
    def read_DynamicLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DynamicLinks()"
        attr.set_value(self.stg.state["DynamicLinks"])

#------------------------------------------------------------------
#    Write DynamicLinks attribute
#------------------------------------------------------------------
    def write_DynamicLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DynamicLinks()"
        self.stg.state["DynamicLinks"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["DynamicLinks"]


#------------------------------------------------------------------
#    Read DynamicPath attribute
#------------------------------------------------------------------
    def read_DynamicPath(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DynamicPath()"
        attr.set_value(self.stg.state["DynamicPath"])


#------------------------------------------------------------------
#    Write DynamicPath attribute
#------------------------------------------------------------------
    def write_DynamicPath(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DynamicPath()"
        self.stg.state["DynamicPath"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["DynamicPath"]


#------------------------------------------------------------------
#    Read ConfigVariables attribute
#------------------------------------------------------------------
    def read_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ConfigVariables()"
        attr.set_value(self.stg.state["ConfigVariables"])


#------------------------------------------------------------------
#    Write ConfigVariables attribute
#------------------------------------------------------------------
    def write_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ConfigVariables()"
        self.stg.state["ConfigVariables"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["ConfigVariables"]


#------------------------------------------------------------------
#    Read ConfigFile attribute
#------------------------------------------------------------------
    def read_ConfigFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ConfigFile()"
        attr.set_value(self.stg.configFile)


#------------------------------------------------------------------
#    Write ConfigFile attribute
#------------------------------------------------------------------
    def write_ConfigFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ConfigFile()"
        self.stg.configFile = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.stg.configFile


#    Read TimeZone attribute
#------------------------------------------------------------------
    def read_TimeZone(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_TimeZone()"
        attr.set_value(self.stg.state["TimeZone"])


#------------------------------------------------------------------
#    Write TimeZone attribute
#------------------------------------------------------------------
    def write_TimeZone(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_TimeZone()"
        self.stg.state["TimeZone"] = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.stg.state["TimeZone"]




#==================================================================
#
#    NXSRecSelector command methods
#
#==================================================================

#------------------------------------------------------------------
#    LoadConfiguration command:
#
#    Description: Load server configuration
#                
#------------------------------------------------------------------
    def LoadConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::LoadConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.stg.loadConfiguration()
            
            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.stg.state.keys():
                if hasattr(dp, var):
                    if isinstance(self.stg.state[var], unicode):
                        dp.write_attribute(str(var), str(self.stg.state[var]))
                    else:
                        dp.write_attribute(str(var), self.stg.state[var])

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        


#---- LoadConfiguration command State Machine -----------------
    def is_LoadConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    LoadConfiguration command:
#
#    Description: Save server configuration
#                
#------------------------------------------------------------------
    def SaveConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::SaveConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.stg.saveConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        


#---- SaveConfiguration command State Machine -----------------
    def is_SaveConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True




#------------------------------------------------------------------
#    UpdateControllers:
#
#    Description: checks existing controllers of pools for 
#        AutomaticDataSources
#                
#------------------------------------------------------------------
    def UpdateControllers(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateControllers()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.stg.updateControllers()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        


#---- UpdateControllers command State Machine -----------------
    def is_UpdateControllers_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    UpdateMntGrp:
#
#    Description: checks existing controllers of pools for 
#        AutomaticDataSources
#                
#------------------------------------------------------------------
    def UpdateMntGrp(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.stg.updateMntGrp()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        


#---- UpdateMntGrp command State Machine -----------------
    def is_UpdateMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True





#------------------------------------------------------------------
#    DataSourcePath command:
#
#    Description: Returns a NeXus path of a given datasource
#                
#    argout: DevString    datasource name
#    argout: DevString    NeXus path
#------------------------------------------------------------------
    def DataSourcePath(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::DataSourcePath()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.stg.dataSourcePath(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- AvailableComponents command State Machine -----------------
    def is_DataSourcePath_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    FindMntGrp command:
#
#    Description: Returns a NeXus path of a given datasource
#                
#    argout: DevString    mntgrp alias
#    argout: DevString    mntgrp full name
#------------------------------------------------------------------
    def FindMntGrp(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::FindMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.stg.findMntGrp(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- AvailableComponents command State Machine -----------------
    def is_FindMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#------------------------------------------------------------------
#    StoreEnvData command:
#
#    Description: Stores ScanDir, ScanFile and ActiveMntGrp 
#                 in environment variables
#                
#    argout: DevString    json dictionary with enviroutment data
#    argout: DevLong    scan ID
#------------------------------------------------------------------
    def StoreEnvData(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::StoreEnvData()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = int(self.stg.storeEnvData(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- StoreEnvData command State Machine -----------------
    def is_StoreEnvData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#------------------------------------------------------------------
#    FetchEnvData command:
#
#    Description: Fetches ScanDir, ScanFile and ActiveMntGrp and ScanID
#                 in environment variables
#                
#    argout: DevString    json dictionary with enviroutment data
#------------------------------------------------------------------
    def FetchEnvData(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::FetchEnvData()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.stg.fetchEnvData())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout
        


#---- FetchEnvData command State Machine -----------------
    def is_FetchEnvData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#------------------------------------------------------------------
#    AvailableComponents command:
#
#    Description: Returns a list of available component names
#                
#    argout: DevVarStringArray    list of available component names
#------------------------------------------------------------------
    def AvailableComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::AvailableComponents()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.availableComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- AvailableComponents command State Machine -----------------
    def is_AvailableComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True


#------------------------------------------------------------------
#    AvailableDataSources command:
#
#    Description: Returns a list of available DataSource names
#                
#    argout: DevVarStringArray    list of available DataSource names
#------------------------------------------------------------------
    def AvailableDataSources(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::AvailableDataSources()"
        #    Add your own code here
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.availableDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- AvailableDataSources command State Machine -----------------
    def is_AvailableDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    PoolChannels command:
#
#    Description: Returns a list of available pool channels
#                
#    argout: DevVarStringArray    list of available pool channels
#------------------------------------------------------------------
    def PoolChannels(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::PoolChannels()"
        #    Add your own code here
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.poolChannels()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- PoolChannels command State Machine -----------------
    def is_PoolChannels_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#------------------------------------------------------------------
#    PoolMotors command:
#
#    Description: Returns a list of available pool channels
#                
#    argout: DevVarStringArray    list of available pool channels
#------------------------------------------------------------------
    def PoolMotors(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::PoolMotors()"
        #    Add your own code here
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.poolMotors()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        
        return argout


#---- PoolMotors command State Machine -----------------
    def is_PoolMotors_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True





#------------------------------------------------------------------
#    MandatoryComponents command:
#
#    Description: Sets the mandatory components
#                
#    argout: DevVarStringArray    component names
#------------------------------------------------------------------
    def MandatoryComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::MandatoryComponents()"
        #    Add your own code here
        
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.stg.mandatoryComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout


#---- MandatoryComponents command State Machine -----------------
    def is_MandatoryComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True



#==================================================================
#
#    NXSRecSelectorClass class definition
#
#==================================================================
class NXSRecSelectorClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
       'PoolBlacklist':
            [PyTango.DevVarStringArray,
            "blacklist of pools",
            [ ] ],
        }


    #    Command definitions
    cmd_list = {
        'DataSourcePath':
            [[PyTango.DevString, "datasource name"],
             [PyTango.DevString, "NeXus Path"]],
        'FindMntGrp':
            [[PyTango.DevString, "mntgrp alias"],
             [PyTango.DevString, "mntgrp fullname"]],
        'StoreEnvData':
            [[PyTango.DevString, "enviroutment data"],
             [PyTango.DevLong, "scanID"]],
        'FetchEnvData':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "enviroutment data"]],
        'LoadConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'SaveConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateControllers':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'AvailableComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available component names"]],
        'AvailableDataSources':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available DataSource names"]],
        'PoolChannels':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available pool channels"]],
        'PoolMotors':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available pool channels"]],
        'MandatoryComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "component names"]],
        }


    #    Attribute definitions
    attr_list = {
        'Components':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Selected Components",
                'description':"list of Selected Components",
            } ],
        'Timer':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Timer",
                'description':"Timer",
                'Memorized':"true",
            } ],
        'ComponentGroup':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Components Group",
                'description':"JSON dict of Components for Selection",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'AutomaticComponentGroup':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Automatic Components Group",
                'description':"JSON dict with selection of automatic "\
                    + "components",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'AutomaticComponents':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Automatic Components",
                'description':"JSON list of automatic components",
            } ],
        'OptionalComponents':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Optional Components Group",
                'description':"JSON list of optional components " \
                    + "available for automatic selection",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'ActiveMntGrp':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Active Measurement Group",
                'description':"Active Measurement Group",
            } ],
        'ScanDir':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Scan Directory",
                'description':"Scan Directory",
            } ],
        'ScanID':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
#                'label':"Scan ID",
                'description':"Scan ID",
            } ],
        'ScanFile':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 50],
            {
                'label':"Scan File(s)",
                'description':"Scan File(s)",
            } ],
        'ConfigDevice':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Configuration Device",
                'description':"Configuration device",
                'Memorized':"true",
            } ],
        'MacroServer':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"MacroServer",
                'description':"MacroServer",
                'Memorized':"true",
            } ],
        'WriterDevice':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Writer Device",
                'description':"Writer device",
                'Memorized':"true",
            } ],
        'DataRecord':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Client Data Record",
                'description':"JSON dictionary with Client Data Record",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'LabelPaths':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Paths for DataSource Labels",
                'description':"JSON dictionary with NeXus Paths for " \
                    + "Datasource Labels",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'LabelTypes':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Types for DataSource Labels",
                'description':"JSON dictionary with NeXus Types for " \
                    + "Datasource Labels",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'LabelShapes':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Shapes for DataSource Labels",
                'description':"JSON dictionary with NeXus Shapes for " \
                    + "Datasource Labels",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'LabelLinks':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Links for DataSource Labels",
                'description':"JSON dictionary with NeXus Links for " \
                    + "Datasource Labels",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'DataSourceLabels':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"DataSource Labels",
                'description':"JSON dictionary with Datasource Labels",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'DataSources':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Selected Datasources",
                'description':"list of Selected Datasources",
            } ],
        'AvailableTimers':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Available Timers",
                'description':"list of Available Timers",
            } ],
        'Description':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':"Dependences descrition",
                'description':"Dependences descrition of Components and " \
                    + "Datasources",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'DataSourceGroup':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Datasources Group",
                'description':"JSON dict of DataSources for selection",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'AutomaticDataSources':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Automatic DataSources",
                'description':"JSON list of Automatic DataSources",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'DisableDataSources':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Disable DataSources",
                'description':"list of Disable DataSources",
            } ],
        'AppendEntry':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Append Entry",
                'description':"flag for entry  appending ",
                'Memorized':"true",
            } ],
        'ComponentsFromMntGrp':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Select Components from MntGrp",
                'description':"select components from mntgrp",
                'Memorized':"true",
            } ],
        'DynamicComponents':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Dynamic Components",
                'description':"create dynamic components",
                'Memorized':"true",
            } ],
        'DynamicLinks':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Links for Dynamic Components",
                'description':"create links for dynamic components",
                'Memorized':"true",
            } ],
        'DynamicPath':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Path for Dynamic Components",
                'description':"path for dynamic components",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'ConfigVariables':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Configuration Variables",
                'description':"JSON dictionary with configuration variables" \
                    + "for templated components",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        'ConfigFile':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Config File with its Path",
                'description':"config file with its full path",
                'Memorized':"true",
            } ],
        'TimeZone':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Time Zone",
                'description':"timezone",
                'Memorized':"true",
            } ],
        }


#------------------------------------------------------------------
#    NXSRecSelectorClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name)
        print "In NXSRecSelectorClass  constructor"

#==================================================================
#
#    NXSRecSelector class main method
#
#==================================================================
if __name__ == '__main__':
    pass
